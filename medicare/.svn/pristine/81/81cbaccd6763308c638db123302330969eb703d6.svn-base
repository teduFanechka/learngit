package yibao.yiwei.service.impl;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Locale;

import org.hibernate.exception.DataException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import yibao.yiwei.dao.IBaseDao;
import yibao.yiwei.entity.Orderperform;
import yibao.yiwei.entity.system.Errorlog;
import yibao.yiwei.service.IOrderperformManager;

/**
 * 医嘱执行记录
 * @author Administrator
 *
 */
@SuppressWarnings("unchecked")
@Service
@Transactional
public class OrderperformManager implements IOrderperformManager {
	
	@Autowired
	private IBaseDao baseDao;
	
	/**
	 * 添加医嘱执行记录
	 */
	@Override
	public void addOrderperform(String path, String cusId, String cusName, Date upCollectdate, int upId,String fileName) throws IOException {
		BufferedReader bufr = null;
		int count = 0;// 定义当行行号
		int error = 0;
		String line = null;// 定义当前行
		String[] name = null;// 定义当前行String数组
		Orderperform orderperform;
		Errorlog errorlog;
		String qsql = "update Uploadfile set isHandle=1,upCount=?0,upName=?1 where upId=?2";
		try {
			File file = new File(path);
			if (file.isFile()) {
				bufr = new BufferedReader(new FileReader(file));
				while ((line = bufr.readLine()) != null) {
					name = line.split("##");
					// 上传文件解析不正确,可能为数据不全
					if (name.length < 13) {
						throw new DataException("正确字段数:13,实际解析字段数:" + name.length + ",字段不全解析停止", null);
					}
					for (int i = 0; i < name.length; i++) {
						if (null != name[i] && name[i].trim().equals("NULL")){
							name[i] = "";
						}
					}
					try{
						orderperform = new Orderperform();
						orderperform.setCusId(cusId);// 获取上级编码
						orderperform.setCusDareway(""); // 医院编码
						orderperform.setCusPid("");// 客户上级id
						orderperform.setDoAddtime(new Date());// 创建日期
						orderperform.setDoPicktime(upCollectdate);// 采集日期从传来的文件采集时间获取
						orderperform.setCaseNo(name[0].trim());// 病案号1
						orderperform.setHospNo(name[1].trim());// 住院号2
						orderperform.setDoNo(name[2].trim());// 医嘱号3
						orderperform.setDoType(name[3].trim());// 医嘱类型4
						orderperform.setItemCode(name[4].trim());// 项目编码5
						orderperform.setItemName(name[5].trim());// 项目名称6
						if (name[6].trim().equals("NULL") || name[6].trim().equals("")) {// 单价7
							orderperform.setItemPrice(0.0);
						} else {
							orderperform.setItemPrice(Double.parseDouble(name[6].trim()));
						}
						orderperform.setItemFreq(name[7].trim());// 频次8
						orderperform.setItemAmount(name[8].trim());// 用量9
						orderperform.setItmeRoute(name[9].trim());// 用法10
						orderperform.setDoPerform(name[10].trim());// 执行护士11
						orderperform.setDoPerformname(name[11].trim());// 执行护士名称12
						DateFormat df;
						if (name[12].trim().equals("NULL") || name[12].trim().equals("") || name[12].trim().equals("1900-1-1")) {
							orderperform.setDoPerformtime(null);
						} else {
							if (name[12].trim().length() == 10) {
								df = new SimpleDateFormat("yyyy-MM-dd");
							} else if(name[12].trim().length() == 18){
								df = new SimpleDateFormat("yyyy-MM-ddHH:mm:ss");
							} else if(name[12].trim().length() == 17){
								df = new SimpleDateFormat("dd-MMM-yyHH:mm:ss",Locale.ENGLISH);
							} else {
								df = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
							}
							orderperform.setDoPerformtime(df.parse(name[12].trim()));// 执行时期13
						}
						baseDao.save(orderperform);
						count++;
					} catch (Exception e) {
						error++;
						if(error <= 5){//只记录文件的5行错误
							String log = e.toString();
							if (log.length() > 300){
								log = log.substring(0, 300);
							}
							errorlog = new Errorlog();
							errorlog.setCusId(cusId);
							errorlog.setCusName(cusName);
							errorlog.setErrAddtime(new Date());
							errorlog.setErrFileflag("医嘱执行记录");
							errorlog.setErrFilepath(fileName);
							errorlog.setErrLog(log + "\n错误行号:" + (count+error) + ",当前错误行内容:\n" + line);
							errorlog.setErrType("数据解析错误");
							baseDao.save(errorlog);
						}
					}
				}
				baseDao.updateOrDelete(qsql, count,"成功"+count+"条，失败"+error+"条",upId);
			} else {
				baseDao.updateOrDelete(qsql,0,"非文件", upId);
			}
		} catch (Exception e) {
			String log = e.toString();
			if (log.length() > 300){
				log = log.substring(0, 300);
			}
			errorlog = new Errorlog();
			errorlog.setCusId(cusId);
			errorlog.setCusName(cusName);
			errorlog.setErrAddtime(new Date());
			errorlog.setErrFileflag("医嘱执行记录");
			errorlog.setErrFilepath(fileName);
			if (null !=name && name.length < 13) {
				errorlog.setErrType("数据上传字段不全错误");
				errorlog.setErrLog(log);
				baseDao.updateOrDelete(qsql,0,"数据上传字段不全错误,正确字段数:13,实际解析字段数:" + name.length, upId);
			} else {
				errorlog.setErrType("数据解析错误");
				errorlog.setErrLog(log + "\n错误行号:" + (count+1) + "  当前错误行内容:\n" + line);
				baseDao.updateOrDelete(qsql,0,"数据解析错误", upId);
			}
			baseDao.save(errorlog);
		} finally {
			if (bufr != null) {
				bufr.close();
			}
		}
	}
}

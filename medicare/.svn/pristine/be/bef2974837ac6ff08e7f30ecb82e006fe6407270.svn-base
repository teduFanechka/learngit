package yibao.yiwei.controller;

import java.io.IOException;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import net.sf.json.JSONArray;
import net.sf.json.JSONObject;
import net.sf.json.JsonConfig;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;

import yibao.yiwei.entity.Drugsdelivery;
import yibao.yiwei.service.IBaseService;
import yibao.yiwei.utils.JsonDateValueProcessor;

/**
 * 药品出库记录表
 * @author Administrator
 *
 */
@Controller
public class DrugsdeliveryController {

	@Autowired
	private IBaseService<Drugsdelivery> baseService;
	
	// 请求视图
	@RequestMapping("/toDrugsdelivery")
	public String toDrugsdelivery() {
		return "/drugsdelivery/drugsdelivery";
	}

	// 新增或修改表格数据
	@RequestMapping("/addOrUpdateDrugsdelivery ")
	public void addOrUpdateDrugsdelivery(HttpServletRequest request, HttpServletResponse response) throws ParseException {
		// 获取jsonArray格式的字符串 有元素为int,date类型获取Object再转换
		String jsonStr = request.getParameter("json");
		String ddId = null;// 定义主键
		String json = "";// 返回json 状态
		JSONArray jsonArray = new JSONArray();
		jsonArray = JSONArray.fromObject(jsonStr);
		Drugsdelivery drugsdelivery = new Drugsdelivery();
		// 当jsonStr=[] 时,即没有修改任何数据jssonArray.size() =0
		if (jsonArray.size() > 0) {
			// 获取jsonArray第一个json对象 jsonObject
			JSONObject jo = jsonArray.getJSONObject(0);
			// 验证所有必填项不为空
			if (jo.size() > 0) {
				// 解析jo 并获取实体字段值
				/*
				 * private String ddId;//出库ID private String cusId;//客户ID
				 * private String cusParentid;//客户上级ID 总店、单体0 private String
				 * ddType;//出库类型 private String ddNo;//出库单号 private Date
				 * ddDatetime;//出库时间 private String ddAuditor;//审核员 private Date
				 * ddAuditdate;//审核日期
				 */
				String cusId = jo.getString("cusId");
				String cusParentid = jo.getString("cusParentid");
				String ddType = jo.getString("ddType");
				String ddNo = jo.getString("ddNo");
				String ddAuditor = jo.getString("ddAuditor");
				String ddDatetime1 = jo.getString("ddDatetime");
				DateFormat df = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
				if (ddDatetime1.equals("")) {
					drugsdelivery.setDdDatetime(null);
				} else {
					Date ddDatetime = df.parse(ddDatetime1);
					drugsdelivery.setDdDatetime(ddDatetime);
				}
				String ddAuditdate1 = jo.getString("ddAuditdate");
				if (ddAuditdate1.equals("")) {
					drugsdelivery.setDdAuditdate(null);
				} else {
					Date ddAuditdate = df.parse(ddAuditdate1);
					drugsdelivery.setDdAuditdate(ddAuditdate);
				}
				drugsdelivery.setCusId(cusId);
				drugsdelivery.setCusParentid(cusParentid);
				drugsdelivery.setDdAuditor(ddAuditor);
				drugsdelivery.setDdNo(ddNo);
				drugsdelivery.setDdType(ddType);
				// 如果等于6 就表示是有主键id,update一条表格数据 , 否则是新增一条表格数据
				if (jo.size() == 8) {
					// 获取id主键
					ddId = jo.getString("ddId");
					drugsdelivery.setDdId(ddId);
					baseService.update(drugsdelivery);
					json = "{ \"status\": \"update\" }";
				} else {
					baseService.save(drugsdelivery);
					json = "{\"status\":\"add\"}";
				}
				try {
					response.setContentType("text/html;charset=utf-8");
					response.getWriter().write(json);
				} catch (IOException e) {
					e.printStackTrace();
				}
			}
		}
	}

	// 获取datagrid 所有Drugsdelivery对象
	@RequestMapping("/getAllDrugsdelivery")
	public String getAllDrugsdelivery(HttpServletRequest request, HttpServletResponse response) throws IOException {
		List<Drugsdelivery> list;// 返回的结果集无论有没有条件查询
		String rows = request.getParameter("rows");// 每页显示的记录数
		String page = request.getParameter("page");// 当前第几页
		String hql = "from Drugsdelivery d order by d.ddId";// 注意hql
		// 查询的是实体类,并不是数据库名称
		// datagrid 获取总记录数
		list = baseService.findByPage(hql, rows, page);
		toBeJson(list, baseService.findCount("select count(*) from Drugsdelivery"), response);
		return null;
	}

	// 转化为Json格式 ,将有Date 格式的list 转为json 可识别格式"2014-01-12 12:20:10"
	public void toBeJson(List<Drugsdelivery> list, int total, HttpServletResponse response) throws IOException {
		// 调用工具类 list(含有java.util.Date)转换成json
		JsonConfig jsonConfig = new JsonConfig();
		jsonConfig.registerJsonValueProcessor(Date.class, new JsonDateValueProcessor());
		JSONObject json = new JSONObject();// new一个JSONObject
		json.accumulate("total", total);// total代表一共有多少数据
		json.accumulate("rows", list, jsonConfig);// 增加一个经过转换的list
		response.setCharacterEncoding("utf-8");// 指定为utf-8
		response.getWriter().write(json.toString());// 转化为JSOn格式
	}

	// 批量删除信息 return null; 返回string 也可以
	@RequestMapping("/delDrugsdelivery")
	public void delDrugsdelivery(HttpServletRequest request, HttpServletResponse response) {
		String ids = request.getParameter("ids");// 要批量删除的id字符串获取主键字符串 1,2,3
		String arr[] = ids.split(",");// 分隔为主键数组
		for (int i = 0; i < arr.length; i++) {
			baseService.updateOrDelete("delete Drugsdelivery where ddId=?0",arr[i]);// 根据ID主键进行删除操作
		}
	}
}

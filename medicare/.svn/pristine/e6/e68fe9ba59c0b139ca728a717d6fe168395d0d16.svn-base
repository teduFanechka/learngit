package yibao.yiwei.service.impl;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.util.Date;
import java.util.List;

import org.hibernate.exception.DataException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import yibao.yiwei.dao.IBaseDao;
import yibao.yiwei.entity.Employee;
import yibao.yiwei.entity.system.Errorlog;
import yibao.yiwei.service.IEmployeeManager;

/**
 * 医护人员表(从业人员信息表)
 * @author Administrator
 *
 */
@SuppressWarnings("unchecked")
@Service
@Transactional
public class EmployeeManager implements IEmployeeManager {
	
	@Autowired
	private IBaseDao baseDao;
	
	/**
	 * 添加医护人员表(从业人员信息表)
	 */
	@Override
	public boolean addEmployees(String path, String cusId, String cusName,Date upCollectdate, int upId,String cusFlag) throws IOException {
		BufferedReader bufr = null;
		int count = 0;// 定义当行行号
		boolean b = false;// 定义解析是否正常
		String line = null;// 定义当前行
		String[] name = null;// 定义当前行String数组
		Employee employee;
		try {
			File file = new File(path);
			if (file.isFile()) {
				bufr = new BufferedReader(new FileReader(file));
				while ((line = bufr.readLine()) != null) {
					name = line.split("##");
					if (name.length < 22) {// 上传文件解析不正确,可能为数据不全
						throw new DataException("异常信息:正确字段总数:22,实际解析字段数:" + name.length + ",数据不全解析停止", null);
					}
					employee = new Employee();
					//判断定点是否连锁,数据解析至分店cusid下开始,判断定点类型是连锁药店并且上传有最后一位分店编码
					if (cusFlag.equals("102") && name.length > 22) {// length:23
						// 分店标识为零,则保存在总店id下
						if (name[22].trim().equals("0")) {
							employee.setCusId(cusId);
						} else {
							// 查找分店id,父id是当前cusid,分店编码为name[]最后一位
							String hql = "select c.cusId from Customer c where c.cusParentid =?0 and c.cusBranchcode=?1 ";
							List list = baseDao.find(hql, cusId, name[22].trim());
							if (list.size() > 0) {
								// 分店已注册查找到分店id
								employee.setCusId(list.get(0).toString());
							} else {// 如果当前分店编码未注册,执行下次循环
								continue;
							}
						}
					} else {
						employee.setCusId(cusId);
					}
					//判断定点是否连锁,数据解析至分店cusid下结束
					employee.setCusParentid("0");
					employee.setEmCode(name[0].trim());
					employee.setEmName(name[1].trim());
					employee.setEmSex(name[2].trim());
					employee.setEmIdnum(name[3].trim());
					employee.setEmTitlename(name[5].trim());
					employee.setEmQualification(name[14].trim());
					employee.setEmPhone(name[15].trim());
					employee.setEmAnnex(name[20].trim());
					employee.setEmRemark(name[21].trim());
					employee.setEmPicktime(upCollectdate);// 采集时间
					employee.setEmAddtime(new Date());// 创建时间
					employee.setAcCode("");// 统筹区编码++
					employee.setAcName("");// 统筹区名称++
					employee.setEmTitlecode(name[4].trim());// 5 职称编码
					employee.setEmJobcode(name[6].trim());// 7 职务编码
					employee.setEmJobname(name[7].trim());// 8 职务名称
					employee.setEmCertified(name[8].trim());// 9 医师资格证编号
					employee.setEmLicence(name[9].trim());// 10 医师执业证编号
					employee.setEmClassifycode(name[10].trim());// 11 执业类别编码
					employee.setEmClassifyname(name[11].trim());// 12 执业类别名称
					employee.setEmScopecode(name[12].trim());// 13 执业范围编码
					employee.setEmScopename(name[13].trim());// 14 执业范围名称
					employee.setDeptCode(name[16].trim());// 17 科室代码
					employee.setDeptName(name[17].trim());// 18 科室名称
					employee.setEmIsexpert(name[18].trim());// 19 是否专家
					employee.setEmStatus(name[19].trim());// 20人员状态
					baseDao.save(employee);
					count++;
				}
				String upHql = "update Uploadfile u set u.upCount=?0 where u.upId=?1 ";
				baseDao.updateOrDelete(upHql, count, upId);
				b = true;
			}
		} catch (Exception e) {
			String log = e.toString();
			if (log.length() > 400){
				log = log.substring(0, 300);
			}
			Errorlog errorlog = new Errorlog();
			errorlog.setCusId(cusId);
			errorlog.setCusName(cusName);
			errorlog.setErrAddtime(new Date());
			errorlog.setErrFileflag("医护人员信息表");
			errorlog.setErrFilepath(path);
			errorlog.setErrLog(log + "\n错误行号:" + (count+1) + "  当前错误行内容:\n" + line);
			if (null !=name && name.length < 22) {
				errorlog.setErrType("数据上传字段不全错误");
			} else {
				errorlog.setErrType("数据解析错误");
			}
			baseDao.save(errorlog);
		} finally {
			if (bufr != null) {
				bufr.close();
			}
		}
		return b;
	}
}

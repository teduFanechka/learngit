package yibao.yiwei.controller.system;

import java.io.BufferedWriter;
import java.io.File;
import java.io.IOException;
import java.io.OutputStream;
import java.io.OutputStreamWriter;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Arrays;
import java.util.Date;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Set;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import net.sf.json.JSONArray;
import net.sf.json.JSONObject;
import net.sf.json.JsonConfig;

import org.apache.commons.fileupload.servlet.ServletFileUpload;
import org.apache.log4j.Logger;
import org.dom4j.Document;
import org.dom4j.DocumentHelper;
import org.dom4j.Element;
import org.dom4j.io.OutputFormat;
import org.dom4j.io.XMLWriter;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.commons.CommonsMultipartFile;

import yibao.yiwei.entity.Page;
import yibao.yiwei.entity.Updatelog;
import yibao.yiwei.service.IBaseService;
import yibao.yiwei.utils.FileInfoUtil;
import yibao.yiwei.utils.JsonDateValueProcessor;
import yibao.yiwei.utils.Utils;

@Controller
public class UpdatelogController {
	
	@Autowired
	private IBaseService<Updatelog> baseService;

	private static final Logger LOG = Logger.getLogger(UpdatelogController.class);
	// 定义文件上传类型
	private static final HashMap<String, String> TypeMap = new HashMap<String, String>();
	static {
		TypeMap.put("image", "gif,jpg,jpeg,png,bmp");
		TypeMap.put("flash", "swf,flv");
		TypeMap.put("media", "swf,flv,mp3,wav,wma,wmv,mid,avi,mpg,asf,rm,rmvb");
		TypeMap.put("file", "exe,doc,docx,xls,xlsx,ppt,pptx,htm,html,txt,dwg,pdf");
	}

	// 获取表格样式 updatelog.jsp视图
	@RequestMapping("/toUpdatelog")
	public String toGetAllUpdatelog() {
		return "/updatelog/updatelog";
	}

	/**
	 * @param file exe文件上传*
	 * @param request
	 * @return message: -1 没有文件上传 0 上传成功 1 上传失败 2 文件超过上传大小 3 文件格式错误 4 上传文件路径非法 5 上传目录没有写权限
	 */
	@RequestMapping("/service/upload")
	public void fileUpload(@RequestParam("file") CommonsMultipartFile file, HttpServletRequest request, HttpServletResponse response) {
		LOG.info("file name is :" + file.getOriginalFilename());
		Updatelog updatelog = new Updatelog();
		if (!file.isEmpty()) {
			// ServletContext servletContext =
			// request.getSession().getServletContext();
			// String uploadPath = servletContext.getRealPath("\\")+
			// "uploadFile\\";
			String uploadPath = "D:/upload/uploadFile/";
			// 文件上传大小
			long fileSize = 20 * 1024 * 1024;

			if (file.getSize() > fileSize) {
				backInfo(response, 2, "文件大小超过限制");
				return;
			}

			String OriginalFilename = file.getOriginalFilename();
			String fileSuffix = OriginalFilename.substring( OriginalFilename.lastIndexOf(".") + 1).toLowerCase();
			// 文件格式错误
			if (!Arrays.asList(TypeMap.get("file").split(",")).contains(fileSuffix)) {
				backInfo(response, 3, "文件格式错误");
				return;
			}
			// 文件不能为空
			if (!ServletFileUpload.isMultipartContent(request)) {
				backInfo(response, 4, "文件不能为空");
				return;
			}

			// 检查上传文件的目录
			File uploadDir = new File(uploadPath);
			if (!uploadDir.isDirectory()) {
				if (!uploadDir.mkdir()) {
					backInfo(response, 5, "上传目录不存在");
					return;
				}
			}

			// 是否有上传的权限
			if (!uploadDir.canWrite()) {
				backInfo(response, 6, "无权限");
				return;
			}

			// 新文件名
			String newname = "";
			// 获取当前日期yyyyMMdd 作为文件名前缀
			String nowtime = Utils.getNowDate();
			newname = nowtime + OriginalFilename;
			// newname += new Date().getTime() + "." + fileSuffix;

			File saveFile = new File(uploadPath, newname);
			try {
				file.transferTo(saveFile);
				backInfo(response, 0, "上传成功");
			} catch (Exception e) {
				LOG.error(e.getMessage(), e);
				backInfo(response, 1, "未知来源");
				return;
			}
			String cusId = request.getParameter("cusId");
			// 获取本次更新时间
			Date ulUpdatetime = new Date();
			// 获取最后一次更新时间记录
			String hql = "from Updatelog u where u.cusId=?0 order by u.ulUpdatetime desc";
			List<Updatelog> list = baseService.find(hql, cusId);
			if (list.size() > 0) {// 说明上次不是第一次上传
				// 获取条件查询第一条记录也就是最近一次更新时间记录
				Date updatetime = list.get(0).getUlUpdatetime();// 查询到上一次更新记录的ulLasttime
				updatelog.setUlLasttime(updatetime);
				updatelog.setUlUpdatetime(ulUpdatetime);
			} else {
				// 第一次上传软件初始化
				updatelog.setUlLasttime(null);
				updatelog.setUlUpdatetime(ulUpdatetime);
			}

			String filename = uploadPath + newname;
			File newFile = new File(filename);
			// 调用工具类读取文件版本号
			String ulVersions = FileInfoUtil.getVersion(newFile);
			updatelog.setCusId(cusId);

			// updatelog.setFileName(filename);// OriginalFilename原始名称
			updatelog.setUlVersions(ulVersions);
			System.out.println("uploadPath:" + uploadPath + " newname:" + newname + " path:" + filename);
			baseService.save(updatelog);
		} else {
			backInfo(response, -1, "");
			return;
		}
	}

	private void backInfo(HttpServletResponse response, int errcode, String errmsg) {
		String json = "{ \"errcode\": " + errcode + ",\"errmsg\": \"" + errmsg + "\" }";
		try {
			response.setContentType("text/html;charset=utf-8");
			response.getWriter().write(json);
		} catch (IOException e) {
			LOG.error(e.getMessage(), e);
		}
	}

	// 新增或修改表格数据
	@RequestMapping("/addOrUpdateUpdatelog")
	public void addOrUpdateUpdatelog(HttpServletRequest request, HttpServletResponse response) throws ParseException {
		// 获取jsonArray格式的字符串 有元素为int,date类型获取Object再转换
		String jsonStr = request.getParameter("json");
		String ulId = null;// 定义主键
		String json = "";// 返回json 状态
		JSONArray jsonArray = new JSONArray();
		jsonArray = JSONArray.fromObject(jsonStr);
		Updatelog updatelog = new Updatelog();
		// 当jsonStr=[] 时,即没有修改任何数据jssonArray.size() =0
		if (jsonArray.size() > 0) {
			// 获取jsonArray第一个json对象 jsonObject
			JSONObject jo = jsonArray.getJSONObject(0);
			// 验证所有必填项不为空
			if (jo.size() > 0) {
				// 解析jo 并获取实体字段值
				String ulVersions = jo.getString("ulVersions");
				String cusId = jo.getString("cusId");
				String ulUpdatetime1 = jo.getString("ulUpdatetime");
				DateFormat df = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
				if (ulUpdatetime1.equals("")) {
					updatelog.setUlUpdatetime(null);
				} else {
					Date ulUpdatetime = df.parse(ulUpdatetime1);
					updatelog.setUlUpdatetime(ulUpdatetime);
				}
				String ulLasttime1 = jo.getString("ulLasttime");
				if (ulLasttime1.equals("")) {
					updatelog.setUlLasttime(null);
				} else {
					Date ulLasttime = df.parse(ulLasttime1);
					updatelog.setUlLasttime(ulLasttime);
				}
				// updatelog.setFileName(fileName);
				updatelog.setCusId(cusId);
				updatelog.setUlVersions(ulVersions);
				// 如果等于6 就表示是有主键id,update一条表格数据 , 否则是新增一条表格数据
				if (jo.size() == 5) {
					// 获取id主键
					ulId = jo.getString("ulId");
					updatelog.setUlId(ulId);
					baseService.update(updatelog);
					json = "{ \"status\": \"update\" }";
				} else {
					baseService.save(updatelog);
					json = "{\"status\":\"add\"}";
				}
				try {
					response.setContentType("text/html;charset=utf-8");
					response.getWriter().write(json);
				} catch (IOException e) {
					e.printStackTrace();
				}
			}
		}
	}

	// 获取datagrid 所有Updatelog对象及条件查询对象
	@RequestMapping("/getAllUpdatelog")
	public String getAllUpdatelog(HttpServletRequest request, HttpServletResponse response) throws IOException {
		List<Updatelog> list;// 返回的结果集无论有没有条件查询
		String rows = request.getParameter("rows");// 每页显示的记录数
		String page = request.getParameter("page");// 当前第几页
		String hql = "from Updatelog u order by u.ulUpdatetime";// 注意hql
		list = baseService.findByPage(hql, rows, page);
		toBeJson(list, baseService.findCount("select count(*) from Updatelog"), response);
		return null;
	}

	// 转化为Json格式 ,将有Date 格式的list 转为json 可识别格式"2014-01-12 12:20:10"
	public void toBeJson(List<Updatelog> list, int total, HttpServletResponse response) throws IOException {
		// 调用工具类 list(含有java.util.Date)转换成json
		JsonConfig jsonConfig = new JsonConfig();
		jsonConfig.registerJsonValueProcessor(Date.class, new JsonDateValueProcessor());
		JSONObject json = new JSONObject();// new一个JSONObject
		json.accumulate("total", total);// total代表一共有多少数据
		json.accumulate("rows", list, jsonConfig);// 增加一个经过转换的list
		response.setCharacterEncoding("utf-8");// 指定为utf-8
		response.getWriter().write(json.toString());// 转化为JSOn格式
	}

	// 批量删除信息
	@RequestMapping("/delUpdatelog")
	public void delUpdatelog(HttpServletRequest request, HttpServletResponse response) {
		String ids;// 要批量删除的id字符串
		ids = request.getParameter("ids");// 获取主键字符串 1,2,3
		String arr[] = ids.split(",");// 分隔为主键数组
		for (int i = 0; i < arr.length; i++) {
			baseService.updateOrDelete("delete Updatelog where ulId=?0",arr[i]);// 根据ID主键进行删除操作
		}
	}

	/*
	 * 以下部分为未应用datagrid老方法
	 */
	// 获取所有历史信息,应用page 分页
	@RequestMapping("/getAllUpdatelogOld")
	public String getAllUpdatelogOld(HttpServletRequest request) {
		Page page;
		String hql = "from Updatelog u order by u.ulUpdatetime desc";// 注意hql
		String countSql = "select count(*) from Updatelog";
		// 查询的是实体类,并不是数据库名称
		// alert引号内没有分号;
		String url = request.getRequestURI();
		String pagenum = request.getParameter("pagenum");
		if (pagenum == null) {
			page = baseService.queryForPage(countSql,hql, url, 1);
		} else {
			page = baseService.queryForPage(countSql,hql, url, Integer.parseInt(pagenum));
		}
		request.setAttribute("page", page);
		return "/updatelog/updatelogBS";
	}

	// 删除功能
	@RequestMapping("/delUpdatelogOld")
	public void delUpdatelog(String ulId, HttpServletResponse response) {
		baseService.updateOrDelete("delete Updatelog where ulId=?0",ulId);
		// return "redirect:/getAllUpdatelog";
	}

	@RequestMapping("/xml")
	public void createXml(HttpServletResponse response, String flag) {
		List<Updatelog> al = null;
		Set<String> hset = null;
		Updatelog updatelog = new Updatelog();
		// String 传入文件的路径名+文件名
		@SuppressWarnings("unused")
		String pathname = "E:/Workspaces/MyEclipse 8.5/WebRoot/WEB-INF/jsp/updatelog/updatelog.xml";
		// 创建文档对象 也就是xml文档
		Document doc = DocumentHelper.createDocument();// 创建document
		Element historyXml = doc.addElement("File");// 添加根元素
		// historyXml.addComment("文档的根File已经创建");// 添加注释
		hset = new HashSet<String>();// 创建一个集合
		// 获取从数据库中获得数据并添加到al这个集合中
		// al = updatelogManager.getAllHistory();
		al = baseService.find("from Updatelog u order by u.ulId");
		// al =
		// updatelogManager.find("from Updatelog h where h.fileName=?0 order by h.id",
		// flag);
		for (int i = 0; i < al.size(); i++) {
			updatelog = al.get(i);
			// 在通过History 这个对象将数据转存到hash集合中去。
			hset.add(updatelog.getUlId());
		}
		// 通过循环将集合中的数据形成一种dom4j树
		for (Iterator<String> it = hset.iterator(); it.hasNext();) {
			String classId = it.next();

			for (int i = 0; i < al.size(); i++) {
				updatelog = al.get(i);
				if (classId.equals(updatelog.getUlId())) {
					Element HistoryEle = historyXml.addElement("Updatelog");
					HistoryEle.addAttribute("ulId", classId);
					HistoryEle.addElement("ulLasttime").addText(updatelog.getUlLasttime() + "");
					if (updatelog.getUlVersions() != null) {
						HistoryEle.addElement("version").addText(updatelog.getUlVersions());
					}
					HistoryEle.addElement("cusId").addText(updatelog.getCusId());
					HistoryEle.addElement("ulUpdatetime").addText(updatelog.getUlUpdatetime() + "");
				}
			}
		}

		try {
			// 编写输出格式
			OutputFormat format = new OutputFormat("	", true, "UTF-8");
			// 将document 也就是这个dom4j树保存到指定 pathname 下的.xml文件中去
			// XMLWriter writer = new XMLWriter(new FileWriter(new
			// File(pathname)), format);
			// writer.write(doc);
			// writer.close();

			// 创建字符串缓冲区
			StringWriter stringWriter = new StringWriter();
			// 创建写文件方法
			XMLWriter xmlWriter = new XMLWriter(stringWriter, format);
			// 写入文件
			xmlWriter.write(doc);
			// 关闭
			xmlWriter.close();

			// 输出xml
			OutputStream out = response.getOutputStream();
			PrintWriter pw = new PrintWriter(new BufferedWriter(new OutputStreamWriter(out)));
			// pw.println("<HTML><HEAD><TITLE>输出HTML标签</HEAD></TITLE><BODY>");
			pw.println(stringWriter.toString());
			// pw.println("</BODY></HTML>");
			pw.flush();
			pw.close();
		} catch (IOException e) {
			e.printStackTrace();
		}
		// return "XML0";
	}

}
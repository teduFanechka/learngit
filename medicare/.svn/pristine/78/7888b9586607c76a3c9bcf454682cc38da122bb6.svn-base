package yibao.yiwei.service.impl;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.text.ParseException;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import org.hibernate.exception.DataException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import yibao.yiwei.dao.IBaseDao;
import yibao.yiwei.entity.Drugcatalog;
import yibao.yiwei.entity.system.Errorlog;
import yibao.yiwei.service.IDrugcatalogManager;

//药品目录表
@SuppressWarnings("unchecked")
@Service
@Transactional
public class DrugcatalogManager implements IDrugcatalogManager {
	
	@Autowired
	private IBaseDao baseDao;
	
	/**
	 * 根据上传文件路径批量保存数据 每解析一条,session.flush()检查有没有sqlExecption,解析都正确后才提交事物
	 * drugcatalogDao.save()获取当前线程保存,session.save()则打开一个新的线程
	 * 
	 * @Transactional(rollbackFor = Exception.class)
	 */
	@Override
	public boolean addDrugcatalogs(String path, String cusId, String cusName, Date upCollectdate, int upId) throws IOException {
		BufferedReader bufr = null;
		FileReader fr;
		int count = 0;// 定义当行行号
		boolean b = false;// 定义解析是否正常
		String line = null;
		String[] name = null;// 定义当前行String数组
		Errorlog errorlog = new Errorlog();
		Drugcatalog drugcatalog;
		try {
			File file = new File(path);
			if (file.isFile()) {
				fr = new FileReader(file);
				bufr = new BufferedReader(fr);
				while ((line = bufr.readLine()) != null) {
					name = line.split("##");
					if (name.length < 26) {// 上传文件解析不正确,可能为数据不全
						throw new DataException("异常信息:正确字段总数:26,实际解析字段数:" + name.length + ",数据不全解析停止", null);
					}
					drugcatalog = new Drugcatalog();
					drugcatalog.setCusId(cusId);
					drugcatalog.setCusParentid("0");
					drugcatalog.setDcCode(name[0].trim());
					drugcatalog.setDcCategory(name[1].trim());
					drugcatalog.setDcCommercial(name[2].trim());// 商品名 3
					drugcatalog.setDcGenericname(name[3].trim());
					drugcatalog.setDcMnemoniccode(name[4].trim());
					drugcatalog.setDcSpecification(name[5].trim());
					drugcatalog.setDcUnit(name[6].trim());
					drugcatalog.setDcDosageform(name[11].trim());
					drugcatalog.setDcPermission(name[12].trim());
					drugcatalog.setDcMfrs(name[13].trim());
					drugcatalog.setDcMakein(name[14].trim());
					drugcatalog.setDcHcscode(name[15].trim());
					drugcatalog.setDcPrice(name[7].trim());// 8 最小包装单价(零售) 小数
					drugcatalog.setDcPackagingunit(name[8].trim());// 9 大包装单位 字符串
					drugcatalog.setDcPackagingprice(name[9].trim());// 10 大包装单价 小数
					drugcatalog.setDcPackagingnum(name[10].trim());// 11 大包装数量 小数
					drugcatalog.setDcCatcode(name[16].trim());// 17 目录类别 整数
					drugcatalog.setDcSettlementcode(name[17].trim());// 18 结算项目编码
					drugcatalog.setDcIsrx(name[18].trim());// 19 处方药标识
					drugcatalog.setDcIsspecial(name[19].trim());// 20 特药标识
					drugcatalog.setDcIsephedradine(name[20].trim());// 21 含麻黄碱标识
					drugcatalog.setDcIsspirit(name[21].trim());// 22 精神药品标识
					drugcatalog.setDcIsimport(name[22].trim());// 23 进口药标识
					drugcatalog.setDcTaboo(name[23].trim());// 24 禁忌描述
					drugcatalog.setDcIndication(name[24].trim());// 25 适应症
					drugcatalog.setDcStatus(name[25].trim());// 26 状态
					drugcatalog.setCusDareway("");// 医院编码
					drugcatalog.setDcPicktime(upCollectdate);// 采集日期
					drugcatalog.setDcAddtime(new Date());// 创建日期
					baseDao.save(drugcatalog);
					count++;
				}
				//update Uploadfile开始
				//修改当前upId文件上传记录表(Uploadfile)字段:upCount解析文件总条数
				String upHql = "update Uploadfile u set u.upCount=?0 where u.upId=?1 ";
				baseDao.updateOrDelete(upHql, count, upId);
				//System.out.println("解析当前*药品目录*文件完毕,更新上传记录表统计条数完毕,共: "+ count + " 条");
				b = true;
			} else {
				//System.out.println("文件不存在:" + path);
				return b;
			}
		} catch (Exception e) {
			String log = e.toString();
			if (log.length() > 400){
				log = log.substring(0, 300);
			}
			errorlog.setCusId(cusId);
			errorlog.setCusName(cusName);
			errorlog.setErrAddtime(new Date());
			errorlog.setErrFileflag("项目编码表");
			errorlog.setErrFilepath(path);
			errorlog.setErrLog(log + "\n错误行号:" + (count+1) + "  当前错误行内容:\n" + line);
			if (null !=name && name.length < 26) {
				errorlog.setErrType("数据上传字段不全错误");
			} else {
				errorlog.setErrType("数据解析错误");
			}
			baseDao.save(errorlog);
		} finally {
			if (bufr != null) {
				bufr.close();
			}
		}
		return b;
	}

	// 根据cusId 商品编码集合获取(药品目录表 Drugcatalog)对应的商品名集合 *已失效*
	@Override
	public List getAlldcCommercials(List drugCodes) {
		int count = 0;
		List list = new ArrayList();
		if (drugCodes.size() > 0) {
			for (int i = 0; i < drugCodes.size(); i++) {
				Object dcCode = drugCodes.get(i);
				String hql = "select d.dcCommercial from Drugcatalog d where d.dcCode=?0";
				List temp = baseDao.find(hql, dcCode);
				if (temp.size() > 0) {
					@SuppressWarnings("unused")
					String dcCommercial = temp.get(0).toString();
					// 如果查找到编码对应的药品名称才会添加到list中
					list.add(count, temp.get(0));
					count++;
				}
			}
		}
		return list;
	}

	// 根据cusId,hql 获取药品编码集合
	@Override
	public List getDrugCodes(String hql, List cusIds) throws ParseException {
		List list = new ArrayList();
		list = baseDao.find(hql, cusIds);
		return list;
	}


}

package yibao.yiwei.controller;

import java.io.IOException;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import net.sf.json.JSONArray;
import net.sf.json.JSONObject;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;

import yibao.yiwei.entity.Warehouseitem;
import yibao.yiwei.service.IBaseService;
import yibao.yiwei.utils.Utils;

/**
 * 入库信息
 * @author Administrator
 *
 */
@SuppressWarnings("unchecked")
@Controller
public class WarehouseitemController {
	
	@Autowired
	private IBaseService baseService;

	/**
	 * 转到入库信息
	 * @param request
	 * @return
	 */
	@RequestMapping("/toWarehouseitem")
	public String toWarehouseitem(HttpServletRequest request) {
		String cusId = request.getParameter("cusId");
		request.setAttribute("cusId", cusId);
		SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
		Calendar cal = Calendar.getInstance();    
		cal.add(Calendar.MONTH, 0);
		cal.set(Calendar.DAY_OF_MONTH,1);
		request.setAttribute("startDate", sdf.format(cal.getTime()));
		request.setAttribute("endDate", sdf.format(Utils.getDate(1)));
		return "/warehouseitem/warehouseitem";
	}

	// 新增或修改表格数据
	@RequestMapping("/addOrUpdateWarehouseitem ")
	public void addOrUpdateWarehouseitem(HttpServletRequest request, HttpServletResponse response) throws ParseException {
		// 获取jsonArray格式的字符串 有元素为int,date类型获取Object再转换
		String jsonStr = request.getParameter("json");
		String wiId = null;// 定义主键
		String json = "";// 返回json 状态
		JSONArray jsonArray = new JSONArray();
		jsonArray = JSONArray.fromObject(jsonStr);
		Warehouseitem warehouseitem = new Warehouseitem();
		// 当jsonStr=[] 时,即没有修改任何数据jssonArray.size() =0
		if (jsonArray.size() > 0) {
			// 获取jsonArray第一个json对象 jsonObject
			JSONObject jo = jsonArray.getJSONObject(0);
			// 验证所有必填项不为空
			if (jo.size() > 0) {
				// 解析jo 并获取实体字段值
				String cusId = jo.getString("cusId");
				String cusParentid = jo.getString("cusParentid");
				String drugCode = jo.getString("drugCode");
				String drugNum = jo.getString("drugNum");
				String drugPurchaseprice = jo.getString("drugPurchaseprice");
				String drugBatchno = jo.getString("drugBatchno");
				String drugMfrs = jo.getString("drugMfrs");
				String drugMadein = jo.getString("drugMadein");
				String drugBuyer = jo.getString("drugBuyer");
				String drugExaminer = jo.getString("drugExaminer");
				String drugEid = jo.getString("drugEid");
				if (drugNum.equals("")) {
					warehouseitem.setDrugNum(0.0);
				} else {
					warehouseitem.setDrugNum(Double.parseDouble(drugNum));
				}
				if (drugPurchaseprice.equals("")) {
					warehouseitem.setDrugPurchaseprice(0.0);
				} else {
					warehouseitem.setDrugPurchaseprice(Double.parseDouble(drugPurchaseprice));
				}
				String drugMfgdate1 = jo.getString("drugMfgdate");
				DateFormat df = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
				if (drugMfgdate1.equals("")) {
					warehouseitem.setDrugMfgdate(null);
				} else {
					Date drugMfgdate = df.parse(drugMfgdate1);
					warehouseitem.setDrugMfgdate(drugMfgdate);
				}
				String drugExpdate1 = jo.getString("drugExpdate");
				if (drugExpdate1.equals("")) {
					warehouseitem.setDrugExpdate(null);
				} else {
					Date drugExpdate = df.parse(drugExpdate1);
					warehouseitem.setDrugExpdate(drugExpdate);
				}
				String drugCollectdate1 = jo.getString("drugCollectdate");
				if (drugCollectdate1.equals("")) {
					warehouseitem.setDrugCollectdate(null);
				} else {
					DateFormat dfc = new SimpleDateFormat("yyyy-MM-dd");
					Date drugCollectdate = dfc.parse(drugCollectdate1);
					warehouseitem.setDrugCollectdate(drugCollectdate);
				}
				warehouseitem.setCusId(cusId);
				warehouseitem.setCusParentid(cusParentid);
				warehouseitem.setDrugBatchno(drugBatchno);
				warehouseitem.setDrugBuyer(drugBuyer);
				warehouseitem.setDrugCode(drugCode);
				warehouseitem.setDrugEid(drugEid);
				warehouseitem.setDrugExaminer(drugExaminer);
				warehouseitem.setDrugMadein(drugMadein);
				warehouseitem.setDrugMfrs(drugMfrs);
				// 如果等于6 就表示是有主键id,update一条表格数据 , 否则是新增一条表格数据
				if (jo.size() == 16) {
					// 获取id主键
					wiId = jo.getString("wiId");
					warehouseitem.setWiId(wiId);
					baseService.update(warehouseitem);
					json = "{ \"status\": \"update\" }";
				} else {
					baseService.save(warehouseitem);
					json = "{\"status\":\"add\"}";
				}
				try {
					response.setContentType("text/html;charset=utf-8");
					response.getWriter().write(json);
				} catch (IOException e) {
					e.printStackTrace();
				}
			}
		}
	}

	/**
	 * 入库信息
	 * @param request
	 * @param response
	 * @throws IOException
	 * @throws ParseException
	 */
	@RequestMapping("/getAllWarehouseitem")
	public void getAllWarehouseitem(HttpServletRequest request, HttpServletResponse response) throws IOException,ParseException {
		List list = new ArrayList();// 返回的结果集无论有没有条件查询
		String rows = request.getParameter("rows");// 每页显示的记录数
		String page = request.getParameter("page");// 当前第几页
		String cusId = request.getParameter("cusId");// 当前cusId
		String startDate = request.getParameter("startDate") != null ? request.getParameter("startDate") : "";// 采集日期查询参数
		String endDate = request.getParameter("endDate") != null ? request.getParameter("endDate") : "";
		String drugName = request.getParameter("drugName") != null ? request.getParameter("drugName") : "";
		int count = 0;
		SimpleDateFormat sf = new SimpleDateFormat("yyyy-MM-dd");
		String hql = "from Warehouseitem where cusId=?0 ";
		String countSql = "select count(WI_ID) from tbl_Warehouseitem where cus_Id=?0 ";
		
		if(!drugName.equals("")){
			countSql+=" and DRUG_NAME like '%"+drugName+"%'";
			hql+=" and drugName like '%"+drugName+"%'";
		}
		Date itemPicktime = null;
		Date itemPicktime2 = null;
		if (!startDate.equals("") && !endDate.equals("")) {
			itemPicktime = sf.parse(startDate);
			itemPicktime2 = sf.parse(endDate);
			countSql+=" and WI_ADDTIME between ?1 and ?2";
			hql+=" and wiAddtime between ?1 and ?2 order by wiAddtime desc";
			count = baseService.findCountSql(countSql,cusId,itemPicktime,itemPicktime2);
			list = baseService.findByPage(hql, rows, page,cusId,itemPicktime,itemPicktime2);
		}
		if (startDate.equals("") && endDate.equals("")) {
			hql+=" order by wiAddtime desc";
			count = baseService.findCountSql(countSql,cusId);
			list = baseService.findByPage(hql, rows, page,cusId);
		}
		if (startDate.equals("") && !endDate.equals("")) {
			itemPicktime2 = sf.parse(endDate);
			countSql+="and WI_ADDTIME <?1";
			hql+="and wiAddtime <?1 order by wiAddtime desc";
			count = baseService.findCountSql(countSql,cusId,itemPicktime2);
			list = baseService.findByPage(hql, rows, page,cusId,itemPicktime2);
		}
		if (!startDate.equals("") && endDate.equals("")) {
			itemPicktime = sf.parse(startDate);
			countSql+="and WI_ADDTIME >?1";
			hql+="and wiAddtime >?1 order by wiAddtime desc";
			count = baseService.findCountSql(countSql,cusId,itemPicktime);
			list = baseService.findByPage(hql, rows, page,cusId,itemPicktime);
		}
		Utils.toBeJson(list, count, response);
	}

	// 批量删除信息 return null; 返回string 也可以
	@RequestMapping("/delWarehouseitem")
	public void delWarehouseitem(HttpServletRequest request, HttpServletResponse response) {
		String ids = request.getParameter("ids");// 要批量删除的id字符串获取主键字符串 1,2,3
		String arr[] = ids.split(",");// 分隔为主键数组
		for (int i = 0; i < arr.length; i++) {
			baseService.updateOrDelete("delete Warehouseitem where wiId=?0", arr[i]);// 根据ID主键进行删除操作
		}
	}

	/**
	 * 转入入库核对
	 * @return
	 */
	@RequestMapping("/toCheckWarehouseitem")
	public String toCheckWarehouseitem() {
		return "/warehouseitem/checkwarehouseitem";
	}

	/**
	 * 核对定点单位入库json 每种药品一行（含诊疗项目），显示项目编号、药品本位码、名称、规格剂型等、价格、数量、总金额，可按某字段排序。
	 * @param y ybm  医院编码
	 * @param fDate 日期1
	 * @param sDate 日期2
	 * @param session
	 * @param request
	 * @return
	 */
	@ResponseBody
	@RequestMapping("/checkWarehouseitem")
	public Map checkWarehouseitem(String yybm, String fDate, String sDate, HttpSession session, HttpServletRequest request) {
		Map<String, Object> map = new HashMap<String, Object>();
		List countList = new ArrayList();
		String rows = request.getParameter("rows");// 每页显示的记录数
		String page = request.getParameter("page");// 当前第几页
		sDate = (sDate == null) ? "" : sDate;
		// String areacode = (String) session.getAttribute("acAreacode");
		String countHql = "select t.drugHcscode from Warehouseitem t where t.cusDareway=?0";
		String hql = "select t.drugHcscode,avg(t.wiPrice),sum(t.drugNum),sum(t.wiPrice*t.drugNum)  from Warehouseitem t where t.cusDareway=?0";
		if (sDate.equals("") && (!fDate.equals(""))) {
			countHql += " and t.wiAddtime like to_date('" + fDate
					+ "','yyyy-mm-dd') ";
			hql += " and t.wiAddtime like to_date('" + fDate
					+ "','yyyy-mm-dd') ";
		} else if ((!fDate.equals("")) && (!sDate.equals(""))) {
			countHql += " and t.wiAddtime  between  to_date('" + fDate
					+ "','yyyy-mm-dd')  and to_date('" + sDate
					+ "','yyyy-mm-dd')";
			hql += " and t.wiAddtime  between  to_date('" + fDate
					+ "','yyyy-mm-dd')  and to_date('" + sDate
					+ "','yyyy-mm-dd')";
		} else {
			countHql += " and t.wiAddtime like sysdate ";
			hql += " and t.wiAddtime like sysdate ";
		}
		countHql += " group by t.drugHcscode order by t.drugHcscode";
		hql += " group by t.drugHcscode order by t.drugHcscode";
		// 按本位码分组查询
		List<String> bwmList = baseService.find(countHql, yybm);
		int total = bwmList.size();
		countList = baseService.findByPage(hql, rows, page, yybm);
		List list = new ArrayList();
		if (total > 0) {
			for (int i = 0; i < countList.size(); i++) {
				List temList = new ArrayList();
				Object[] arr1 = (Object[]) countList.get(i);
				String bwm = (String) arr1[0];
				//按照当前库存信息表中的医院编码本位码查找对应的项目编码表中( 项目编号、名称、规格 ,剂型)
				hql = "select d.dcCode,d.dcCommercial,d.dcSpecification,d.dcDosageform from Drugcatalog d where d.cusDareway=?0 and d.dcHcscode=?1";
				List tem = baseService.find(hql, yybm, bwm);
				for (int j = 0; j < arr1.length; j++) {
					temList.add(arr1[j]);
				}
				if (tem.size() > 0) {
					Object[] arr2 = (Object[]) tem.get(0);
					for (int j = 0; j < arr2.length; j++) {
						temList.add(arr2[j]);
					}
				}
				list.add(i, temList);
			}
		}
		map.put("total", total);
		map.put("rows", list);
		return map;

	}

}

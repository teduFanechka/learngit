package yibao.yiwei.controller;

import java.io.File;
import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.net.URLDecoder;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import net.sf.json.JSONArray;
import net.sf.json.JSONObject;
import net.sf.json.JsonConfig;

import org.apache.commons.fileupload.servlet.ServletFileUpload;
import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.commons.CommonsMultipartFile;

import yibao.yiwei.entity.Drugcatalog;
import yibao.yiwei.entity.Uploadfile;
import yibao.yiwei.service.IBaseService;
import yibao.yiwei.utils.JsonDateValueProcessor;

/**
 * 药品目录表
 */
@SuppressWarnings("all")
@Controller
public class DrugcatalogController {
	
	@Autowired
	private IBaseService baseService;
	
	// 日志
	private static Logger log = Logger.getLogger(DrugcatalogController.class);
	public static String sep = System.getProperty("file.separator");
	boolean b = true;
	// 定义文件上传类型为txt文本
	private static final HashMap<String, String> TypeMap = new HashMap<String, String>();

	static {
		TypeMap.put("image", "gif,jpg,jpeg,png,bmp");
		TypeMap.put("flash", "swf,flv");
		TypeMap.put("media", "swf,flv,mp3,wav,wma,wmv,mid,avi,mpg,asf,rm,rmvb");
		TypeMap.put("file", "txt");
		// TypeMap.put("file",
		// "doc,docx,xls,xlsx,ppt,pptx,htm,html,txt,dwg,pdf");
	}

	// 转至文件上传视图
	@RequestMapping("/toDrugcatalog")
	public String toDrugcatalog(HttpServletRequest request, String cusId, String cusFlag) {
		request.setAttribute("cusId", cusId);
		request.setAttribute("cusFlag", cusFlag);
		return "/drugcatalog/drugcatalog";
	}

	/**
	 * @param file
	 * @param request
	 * @param response
	 * 说明 :1.保存加密文件 2.保存上传药品目录相关数据至数据库表:tbl_uploadlog 3.启动定时任务,判断tbl_uploadlog isHandle 如果为真则解密文件并解析内容保存至数据表medicinelist
	 * @throws ParseException
	 */
	@RequestMapping("/medicare/service/fileupload")
	public void fileupload(@RequestParam("file") CommonsMultipartFile file, HttpServletRequest request, HttpServletResponse response) throws ParseException {
		log.info("file name is :" + file.getOriginalFilename());
		Uploadfile uploadfile = new Uploadfile();
		String cusId = request.getParameter("cusId");
		cusId = cusId == null ? "" : cusId;
		if (cusId.equals("")){
			backInfo(response, -1, "没有定点注册信息");			
			return;
		}
		String hql = "from Customer c where c.cusId=?0 and c.cusStatus=1";
		List list = baseService.find(hql, cusId);
		
		//add by fd 0522
		if (list.size() <= 0) {
			// System.out.println("null文件");
			backInfo(response, -1, "注册信息不存在或未经审批,请联系亿维工程师");
			return;			
		}
		
		String appVer = request.getParameter("ver");
		String uniCode = request.getParameter("uni");
		
		System.out.println("ver:" + appVer);
		System.out.println("uni:" + uniCode);
		
		// System.out.println(cusId + ":" + list.size());
		if ((!file.isEmpty()) && (list.size() > 0)) {
			// 调用方法,根据cusId,目录类型 创建密文文件夹路径
			// 定义文件夹路径
			String uploadPath = getDirectory(cusId, "MI");
			// System.out.println(uploadPath);
			String errmsg;// 返回的提示信息
			int errcode;// 0 成功 1 未知来源 2 文件大小超过限制
			// 文件上传大小
			long fileSize = 20 * 1024 * 1024;

			if (file.getSize() > fileSize) {
				errcode = 2;
				errmsg = "文件大小超过限制";
				backInfo(response, errcode, errmsg);
				return;
			}
			String OriginalFilename = file.getOriginalFilename();
			String fileSuffix = OriginalFilename.substring(OriginalFilename.lastIndexOf(".") + 1).toLowerCase();
			// 文件格式错误
			if (!Arrays.asList(TypeMap.get("file").split(",")).contains(fileSuffix)) {
				log.error("文件格式错误!");
				backInfo(response, 3, "文件格式错误");
				return;
			}
			// 文件不能为空
			if (!ServletFileUpload.isMultipartContent(request)) {
				backInfo(response, 4, "文件不能为空");
				return;
			}
			// 检查上传文件的目录
			File uploadDir = new File(uploadPath);
			if (!uploadDir.isDirectory()) {
				if (!uploadDir.mkdir()) {
					backInfo(response, 5, "上传目录不存在");
					return;
				}
			}
			// 是否有上传的权限
			if (!uploadDir.canWrite()) {
				backInfo(response, 6, "无权限");
				return;
			}
			// 新文件名
			String filename = "";
			// 获取当前日期yyyyMMdd 作为文件名前缀
			// String nowtime = Utils.getCurrentTimeAsNumber();
			String upFileflag = request.getParameter("filetag");
			filename = upFileflag + OriginalFilename;// 文件名称=文件标识+原始上传文件名
			// newname += new Date().getTime() + "." + fileSuffix;
			// 保存文件
			File saveFile = new File(uploadPath, filename);
			try {
				errcode = 0;
				errmsg = "上传成功";
				file.transferTo(saveFile);
				backInfo(response, errcode, errmsg);
			} catch (Exception e) {
				log.error(e.getMessage(), e);
				backInfo(response, 1, "未知来源");
				return;
			}
			/**
			 * 保存上传药品目录 数据至数据库表:medicineListUploadAdd clientid 商户端id
			 * uploadaddress 上传地址 filetpye 文件类型 filesize 上传文件大小 upFileflag 文件类型
			 * status 状态
			 */
			uploadfile.setCusId(cusId);
			uploadfile.setFilesize((int) (file.getSize()));
			uploadfile.setUpFileflag(upFileflag);
			String isEncrypt = request.getParameter("isencrypt");
			if (isEncrypt == null) {
				uploadfile.setIsEncrypt(1); // 默认为1
			} else {
				uploadfile.setIsEncrypt(Integer.parseInt(isEncrypt));
			}
			uploadfile.setIsHandle(0);
			// 截取相对路径 /var/uploaddir/ D:\\var\\uploaddir\\

			String tem;
			if (uploadPath.startsWith("D:")) {// windowns 目录
				String[] arr = uploadPath.split("D:");
				uploadfile.setUpFilepath(arr[1] + sep + filename);
				tem = arr[1] + sep + filename;
			} else {
				uploadfile.setUpFilepath(uploadPath + sep + filename);
				tem = uploadPath + sep + filename;
			}
			uploadfile.setFilename(filename);
			// Timestamp upDate = new Timestamp(System.currentTimeMillis());
			Date upDate = new Date();
			SimpleDateFormat df = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
			String upCollectiondate1 = request.getParameter("upCollectdate");
			Date upCollectiondate;
			if (upCollectiondate1 == null || upCollectiondate1.equalsIgnoreCase("null")) {// 如果没有解析日期
				String todayStr = df.format(upDate);
				upCollectiondate = df.parse(todayStr);
			} else {
				if (upCollectiondate1.trim().length() == 10) {
					df = new SimpleDateFormat("yyyy-MM-dd");
				} else {
					df = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
				}

				upCollectiondate = df.parse(upCollectiondate1);

			}
			// System.out.println(cusId + ":" + df.format(upCollectiondate)+
			// " path:" + tem);

			uploadfile.setUpDate(upDate);
			uploadfile.setUpCollectiondate(upCollectiondate);
			uploadfile.setUpCount(0);
			baseService.save(uploadfile);
		} else {
			backInfo(response, -1, "上传文件不能为空");
			return;
		}
	}
	
	// 返回json信息
	private void backInfo(HttpServletResponse response, int errcode, String errmsg) {
		String json = "{ \"errcode\": " + errcode + ",\"errmsg\": \"" + errmsg + "\" }";
		try {
			response.setContentType("text/html;charset=utf-8");
			response.getWriter().write(json);
		} catch (IOException e) {
			log.error(e.getMessage(), e);
		}
	}

	// 根据客记端 ID,明文/密文 类型来创建目录
	public static String getDirectory(String id, String dirType) {
		// 创建年,月,日目录
		Calendar now = Calendar.getInstance();
		int year = now.get(Calendar.YEAR);
		int month = now.get(Calendar.MONTH) + 1;
		int day = now.get(Calendar.DAY_OF_MONTH);

		/*
		 * File file = new File("D:/upload/药店Root/" + id + "/" + year + "/" +
		 * month + "/" + day + "/" + dirType);
		 */

		File file;
		String osName = System.getProperty("os.name");// Windows XP

		if (osName.toLowerCase().indexOf("windows") > -1) {
			file = new File("D:/var/uploaddir/" + id + sep + year + sep + month + sep + day + sep + dirType + sep);
		} else {
			file = new File("/var/uploaddir/" + id + sep + year + sep + month + sep + day + sep + dirType + sep);
		}

		// 如果药店Root 目录不存在就创建
		boolean b = false;
		if (!file.exists() && !file.isDirectory()) {
			b = file.mkdirs();
		}
		// System.out.println(dirType +"getDirectory::::::"+ file.getPath());
		return file.getPath();

	}

	// 新增或修改表格数据
	@RequestMapping("/addOrUpdateDrugcatalog ")
	public void addOrUpdateDrugcatalog(HttpServletRequest request, HttpServletResponse response) {
		// 获取jsonArray格式的字符串
		String jsonStr = request.getParameter("json");
		String dcId = null;// 定义主键
		String json = "";// 返回json 状态
		JSONArray jsonArray = new JSONArray();
		jsonArray = JSONArray.fromObject(jsonStr);
		Drugcatalog drugcatalog = new Drugcatalog();
		// 当jsonStr=[] 时,即没有修改任何数据jssonArray.size() =0
		if (jsonArray.size() > 0) {
			// 获取jsonArray第一个json对象 jsonObject
			JSONObject jsonObject = jsonArray.getJSONObject(0);
			// 验证所有必填项不为空
			if (jsonObject.size() > 0) {
				// 解析jsonObject 并获取实体字段值
				String cusId = jsonObject.getString("cusId");// 客户id
				String cusParentid = jsonObject.getString("cusParentid");// 客户上级Id
				String dcCode = jsonObject.getString("dcCode");// 药品编码（本地）
				String dcCategory = jsonObject.getString("dcCategory");// 药品类别
				String dcCommercial = jsonObject.getString("dcCommercial");// 品名
				String dcGenericname = jsonObject.getString("dcGenericname");// 通用名
				String dcMnemoniccode = jsonObject.getString("dcMnemoniccode");// 助记码
				String dcSpecification = jsonObject.getString("dcSpecification");// 规格
				String dcUnit = jsonObject.getString("dcUnit");// 单位
				String dcDosageform = jsonObject.getString("dcDosageform");// 剂型
				String dcPermission = jsonObject.getString("dcPermission");// 批准文号
				String dcMfrs = jsonObject.getString("dcMfrs");// 生产商
				String dcMakein = jsonObject.getString("dcMakein");// 产地
				String dcHcscode = jsonObject.getString("dcHcscode");// 药品编码(中心)
				drugcatalog.setCusId(cusId);
				drugcatalog.setCusParentid(cusParentid);
				drugcatalog.setDcCode(dcCode);
				drugcatalog.setDcPermission(dcPermission);
				drugcatalog.setDcHcscode(dcHcscode);
				drugcatalog.setDcDosageform(dcDosageform);
				drugcatalog.setDcGenericname(dcGenericname);
				drugcatalog.setDcMfrs(dcMfrs);
				drugcatalog.setDcCategory(dcCategory);
				drugcatalog.setDcMnemoniccode(dcMnemoniccode);
				drugcatalog.setDcMakein(dcMakein);
				drugcatalog.setDcCommercial(dcCommercial);
				drugcatalog.setDcSpecification(dcSpecification);
				drugcatalog.setDcUnit(dcUnit);

				// 如果等于14 就表示是有主键id,update一条表格数据 , 否则是新增一条表格数据
				if (jsonObject.size() == 15) {
					// 获取id主键
					dcId = jsonObject.getString("dcId");
					drugcatalog.setDcId(dcId);
					baseService.update(drugcatalog);
					json = "{ \"status\": \"update\" }";
				} else {
					baseService.save(drugcatalog);
					json = "{\"status\":\"add\"}";
				}
				try {
					response.setContentType("text/html;charset=utf-8");
					response.getWriter().write(json);
				} catch (IOException e) {
					e.printStackTrace();
				}
			}
		}
	}

	// 获取datagrid 所有Drugcatalog对象及条件查询对象
	@RequestMapping("/getAllDrugcatalog")
	public void getAllDrugcatalog(HttpServletRequest request, String cusId, String cusFlag, HttpServletResponse response) throws IOException {
		List<Drugcatalog> list = null;// 返回的结果集无论有没有条件查询
		String rows = request.getParameter("rows");
		String page = request.getParameter("page");
		String hql = "from Drugcatalog d where d.cusId=?0 order by d.dcAddtime desc";
		//判断是否为连锁药店,是查询id=parentid开始
		//药品目录,供应商二表共用信息listchainpharmacy.jsp,drugcatalog.jsp,drugcatalog.js等要添加参数cusFlag
		if (cusFlag.equals("102")) {
			String phql = "select c.cusParentid from Customer c where c.cusId=?0";
			List plist = baseService.find(phql, cusId);
			if (plist.get(0) != null) {
				String parentid = plist.get(0).toString();
				if (parentid.length() > 1) {
					cusId = parentid;
				}
			}
		}
		String countHql = "select count(d.DC_ID) from tbl_Drugcatalog d where d.cus_Id=?0";
		int count = baseService.findCountSql(countHql, cusId);
		if (count > 0) {
			list = baseService.findByPage(hql, rows, page, cusId);
		}
		toBeJson(list, count, response);
	}

	// 转化为Json格式 ,将有Date 格式的list 转为json 可识别格式"2014-01-12 12:20:10"
	public void toBeJson(List<Drugcatalog> list, int total, HttpServletResponse response) throws IOException {
		// 调用工具类 list(含有java.util.Date)转换成json
		JsonConfig jsonConfig = new JsonConfig();
		jsonConfig.registerJsonValueProcessor(Date.class, new JsonDateValueProcessor());
		JSONObject json = new JSONObject();// new一个JSONObject
		json.accumulate("total", total);// total代表一共有多少数据
		json.accumulate("rows", list, jsonConfig);// 增加一个经过转换的list
		response.setContentType("application/json;charset=UTF-8");// 指定为utf-8
		response.getWriter().write(json.toString());// 转化为JSOn格式

	}

	// 批量删除信息
	@RequestMapping("/delDrugcatalog")
	public void delDrugcatalog(HttpServletRequest request, HttpServletResponse response) {
		String ids = request.getParameter("ids");// 获取主键字符串 1,2,3
		String arr[] = ids.split(",");// 分隔为主键数组
		for (int i = 0; i < arr.length; i++) {
			baseService.delete(Drugcatalog.class,arr[i]);// 根据ID主键进行删除操作
		}
		// return null; 返回string 也可以
	}

	/**
	 * 请求视图 Drug standard code 查找药品本位码
	 * 
	 * @param request
	 * @param response
	 * @return searchDSC
	 */
	@RequestMapping("/toSearchDSC")
	public String toSearchDSC(HttpServletRequest request, HttpServletResponse response) {
		return "/drugcatalog/searchDSC";
	}

	/**
	 * 按药品名称或本位码查询 Drug standard code
	 * 
	 * @param rows  每页显示的记录数
	 * @param page  当前第几页
	 * @param name 查询参数
	 * @param request
	 * @param response
	 * @return json
	 * @throws UnsupportedEncodingException
	 */
	@ResponseBody
	@RequestMapping("/getDSC")
	public Map getDSC(String rows, String page, String name, HttpServletRequest request, HttpServletResponse response) throws UnsupportedEncodingException {
		Map<String, Object> map = new HashMap<String, Object>();
		List list = new ArrayList();// 返回的结果集无论有没有条件查询
		name = URLDecoder.decode(name, "UTF-8");
		String countHql = "select count(d.cus_Id) from tbl_Customer c ,tbl_Drugcatalog d where c.cus_Id=d.cus_Id and (d.dc_Hcscode=?0 or d.dc_Commercial like'%" + name + "%')";
		int count = baseService.findCountSql(countHql, name);
		String hql = "select c.cusName,c.cusFlag,d.dcCommercial,d.dcMfrs,d.dcUnit,d.dcPrice,d.dcPackagingunit,d.dcPackagingnum,d.dcPackagingprice,d.dcHcscode "
				+ "from Customer c ,Drugcatalog d where c.cusId=d.cusId and (d.dcHcscode=?0 or d.dcCommercial like'%" + name + "%') order by d.dcHcscode";
		list = baseService.findByPage(hql, rows, page, name);
		map.put("rows", list);
		map.put("total", count);
		return map;
	}
}

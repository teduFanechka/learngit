package yibao.yiwei.service.impl;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Date;

import org.hibernate.exception.DataException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import yibao.yiwei.dao.IBaseDao;
import yibao.yiwei.entity.Hospitalized;
import yibao.yiwei.entity.system.Errorlog;
import yibao.yiwei.service.IHospitalizedManager;

/**
 * 住院信息记录表
 * @author Administrator
 *
 */
@SuppressWarnings("unchecked")
@Service
@Transactional
public class HospitalizedManager implements IHospitalizedManager {
	
	@Autowired
	private IBaseDao baseDao;
	

	/**
	 * 添加住院信息记录表
	 */
	@Override
	public boolean addHospitalized(String path, String cusId, String cusName, Date upCollectdate, int upId) throws IOException {
		BufferedReader bufr = null;
		int count = 0;// 定义当行行号
		boolean b = false;// 定义解析是否正常
		String line = null;// 定义当前行
		String[] name = null;// 定义当前行String数组
		Hospitalized hospitalized;
		try {
			File file = new File(path);
			if (file.isFile()) {
				bufr = new BufferedReader(new FileReader(file));
				while ((line = bufr.readLine()) != null) {
					name = line.split("##");
					// 上传文件解析不正确,可能为数据不全
					if (name.length < 26) {
						throw new DataException("异常信息:正确字段总数:26,实际解析字段数:" + name.length + ",数据不全解析停止", null);
					}
					for (int i = 0; i < name.length; i++) {
						if (null != name[i] && name[i].trim().equals("NULL")){
							name[i] = "";
						}
					}
					try{
						hospitalized = new Hospitalized();
						hospitalized.setCusId(cusId);// 客户id
						hospitalized.setCusDareway(""); // 医院编码
						hospitalized.setHospPicktime(upCollectdate);// 采集日期从传来的文件采集时间获取
						hospitalized.setHospAddtime(new Date());// 创建日期
						hospitalized.setSiPtshealthcard(name[25].trim());// 医保卡号26
						hospitalized.setSiPtsidcard(name[24].trim());// 身份证号 25
						hospitalized.setSiPtsage(name[23].trim());// 年龄24
						if (name[22].trim().equals("NULL") || name[22].trim().equals("")) {// 性别23
							hospitalized.setSiPtssex(0);
						} else if (name[22].trim().contains("男")) {
							hospitalized.setSiPtssex(1);
						} else if (name[22].trim().contains("女")) {
							hospitalized.setSiPtssex(2);
						} else {
							hospitalized.setSiPtssex(Integer.parseInt(name[22].trim()));
						}
						hospitalized.setSiPtsname(name[21].trim());// 姓名 22
						DateFormat df;
						if (name[20].trim().equals("NULL") || name[20].trim().equals("")) {
							hospitalized.setHospIntime(null);
						} else {
							if (name[20].trim().length() == 10) { // 住院日期 21
								df = new SimpleDateFormat("yyyy-MM-dd");
							} else {
								df = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
							}
							hospitalized.setHospIntime(df.parse(name[20].trim()));
						}
						hospitalized.setHospBedno(name[19].trim());// 床位号 20
						hospitalized.setHospWardno(name[18].trim());// 房间号 19
						hospitalized.setHospAreas(name[17].trim());// 病区名称 18
						hospitalized.setHospDoctorname(name[16].trim());// 主冶医师名称17
						hospitalized.setHospDoctor(name[15].trim());// 主治医师 16
						hospitalized.setHospDeptname(name[14].trim());// 入院科室名称15
						hospitalized.setHospDept(name[13].trim());// 入院科室 14
						hospitalized.setHospWay(name[12].trim());// 住院方式 13
						hospitalized.setHospType(name[11].trim());// 住院类别 12
						hospitalized.setIcdName(name[10].trim());// 疾病名称 11
						hospitalized.setIcdCode(name[9].trim());// 疾病编码 10
						if (name[8].trim().equals("NULL") || name[8].trim().equals("")) {// 时间类型字段是否为NULL
							hospitalized.setDiagDatetime(null);
						} else {
							if (name[8].trim().length() == 10) { // 确诊日期 9
								df = new SimpleDateFormat("yyyy-MM-dd");
							} else {
								df = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
							}
							hospitalized.setDiagDatetime(df.parse(name[8].trim()));
						}
						hospitalized.setDiagDoctorname(name[7].trim());// 确认医师名称8
						hospitalized.setDiagDoctor(name[6].trim());// 确诊医师 7
						hospitalized.setDiagDeptname(name[5].trim());// 门诊科室名称6
						hospitalized.setDiagDept(name[4].trim());// 门诊科室 5
						if (name[3].trim().equals("NULL") || name[3].trim().equals("")) {
							hospitalized.setDiagType(0);
						} else {
							hospitalized.setDiagType(Integer.parseInt(name[3].trim()));// 接诊方式
						}
						hospitalized.setHospNo(name[2].trim());// 住院号 3
						hospitalized.setCaseNo(name[1].trim());// 病案号 2
						if (name[0].trim().equals("NULL") || name[0].trim().equals("")) {
							hospitalized.setDoctorType(0);
						} else {
							hospitalized.setDoctorType(Integer.parseInt(name[0].trim()));// 就医类别
						}

						baseDao.save(hospitalized);
						count++;
					} catch (Exception e) {
						System.out.println("该行解析错误");
					}
				}
				String upHql = "update Uploadfile u set u.upCount=?0 where u.upId=?1 ";
				baseDao.updateOrDelete(upHql, count, upId);
				b = true;
			}
		} catch (Exception e) {
			String log = e.toString();
			if (log.length() > 400){
				log = log.substring(0, 300);
			}
			Errorlog errorlog = new Errorlog();
			errorlog.setCusId(cusId);
			errorlog.setCusName(cusName);
			errorlog.setErrAddtime(new Date());
			errorlog.setErrFileflag("住院信息表");
			errorlog.setErrFilepath(path);
			errorlog.setErrLog(log + "\n错误行号:" + (count+1) + "  当前错误行内容:\n" + line);
			if (null !=name && name.length < 26) {
				errorlog.setErrType("数据上传字段不全错误");
			} else {
				errorlog.setErrType("数据解析错误");
			}
			baseDao.save(errorlog);
		} finally {
			if (bufr != null) {
				bufr.close();
			}
		}
		return b;
	}

}

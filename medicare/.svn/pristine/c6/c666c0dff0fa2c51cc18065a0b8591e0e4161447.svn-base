package yibao.yiwei.controller.system;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;

import yibao.yiwei.entity.CusareaRelate;
import yibao.yiwei.entity.Customer;
import yibao.yiwei.service.IBaseService;

/**
 * 定点区划
 * @author Administrator
 */
@SuppressWarnings("unchecked")
@Controller
public class AreacusController {
	
	@Autowired
	private IBaseService baseService;
	
	/**
	 * 转到定点区划分区页面
	 * @param request
	 * @return
	 */
	@AuthPassport
	@RequestMapping("/toAreacus")
	public String toAreacus(HttpServletRequest request) {
		String hql = "from Areacode where acStatus=1";
		List list = baseService.find(hql);
		request.setAttribute("list", list);
		return "/areacode/areacus";
	}
	
	/**
	 * 转到定点区划页面
	 * @param cusFlag
	 * @param areacode
	 * @param request
	 * @return
	 */
	@RequestMapping("/getAreaCus")
	public String getAreaCus(String cusFlag, String areacode, HttpServletRequest request){
		String hql = "from Areacode where acStatus=1";
		List list = baseService.find(hql);
		request.setAttribute("list", list);
		request.setAttribute("cusFlag", cusFlag);
		request.setAttribute("areacode", areacode);
		return "/areacode/areacuslist";
	}

	/**
	 * 根据cusFlag或areacode查询定点区划
	 * @param cusFlag
	 * @param areacode
	 * @param request
	 * @return
	 */
	@ResponseBody
	@RequestMapping("/getAreaCustomer")
	public Map getAreaCustomer(String cusFlag, String areacode,HttpServletRequest request) {
		Map<String, Object> map = new HashMap<String, Object>();
		List list = new ArrayList();// 返回的结果集无论有没有条件查询
		String rows = request.getParameter("rows");// 每页显示的记录数
		String page = request.getParameter("page");// 当前第几页
		String cusName = request.getParameter("cusName") != null ? request.getParameter("cusName").trim() : "";// 按定点名称查询
		String hql = "from Customer c where (c.cusStatus=1 or c.cusStatus=2)";
		String countSql = "SELECT count(c.CUS_ID) FROM TBL_CUSTOMER c WHERE (c.CUS_STATUS=1 or c.CUS_STATUS=2)";
		if(null != cusFlag && !cusFlag.equals("")){
			hql+=" and c.cusFlag='"+cusFlag+"'";
			countSql+=" AND c.CUS_FLAG='"+cusFlag+"'";
		}
		if(null != areacode && !areacode.equals("") && !areacode.equals("0")){
			hql+=" and c.cusId in (select a.cusId from CusareaRelate a where a.acAreacode = '"+areacode+"')";
			countSql+=" and c.cus_Id in (select a.cus_Id from SYS_Cusarea_Relate a where a.ac_Areacode = '"+areacode+"')";
		}
		
		if(null != areacode && areacode.equals("0")){//未划分
			hql+=" and c.cusId not in (select a.cusId from CusareaRelate a)";
			countSql+=" and c.cus_Id not in (select a.cus_Id from SYS_Cusarea_Relate a)";
		}
		
		if(null != cusName && !cusName.equals("")){
			hql+=" and (c.cusName like '%" + cusName + "%' or c.cusDareway='" + cusName + "' or c.cusPcode like '%" + cusName + "%')";
			countSql+=" and (c.cus_Name like '%" + cusName + "%' or c.cus_Dareway='" + cusName + "' or c.cus_Pcode like '%" + cusName + "%')";
		}
		hql+=" order by c.cusRegdate desc";
		list = baseService.findByPage(hql, rows, page);
		int count = baseService.findCountSql(countSql);
		map.put("total", count);
		map.put("rows", list);
		return map;
	}

	/**
	 * 添加或更新定点区划关联表
	 * 
	 * @param request
	 * @return
	 */
	@ResponseBody
	@RequestMapping("/addAreacus")
	public Map addAreacus(HttpServletRequest request) {
		Map<String, Object> map = new HashMap<String, Object>();
		String ids = request.getParameter("ids");
		String areacode = request.getParameter("areacode");
		String arr[] = ids.split(",");
		CusareaRelate cusareaRelate;
		for (int i = 0; i < arr.length; i++) {
			String cusid = arr[i];
			String hql = "delete CusareaRelate c where c.cusId=?0";// 删除原有对应关系
			baseService.updateOrDelete(hql, cusid);
			cusareaRelate = new CusareaRelate();
			cusareaRelate.setAcAreacode(areacode);
			cusareaRelate.setCusId(cusid);
			baseService.save(cusareaRelate);
		}
		map.put("status", "添加完成");
		return map;
	}

	/**
	 * 未分区县定点批量划分
	 */
	@ResponseBody
	@RequestMapping("/addAreacusBatch")
	public Map addAreacusBatch() {
		Map<String, Object> map = new HashMap<String, Object>();
		CusareaRelate cusareaRelate;
		String hql = "from Customer c where c.cusStatus=1 or c.cusStatus=2";
		List list = baseService.find(hql);
		int num = 0;// 定义计数器
		Customer customer;
		for (int i = 0; i < list.size(); i++) {
			customer = (Customer) list.get(i);
			String cusid = customer.getCusId();
			String cusname = customer.getCusName();
			String cusAddr = customer.getCusAddr();
			String areacode;
			cusname = (cusname == null) ? "" : cusname;
			cusAddr = (cusAddr == null) ? "" : cusAddr;
			if (cusname.contains("张店") || cusAddr.contains("张店")) {
				areacode = "370303";
			} else if (cusname.contains("淄川") || cusAddr.contains("淄川")) {
				areacode = "370302";
			} else if (cusname.contains("桓台") || cusAddr.contains("桓台")) {
				areacode = "370321";
			} else if (cusname.contains("临淄") || cusAddr.contains("临淄")) {
				areacode = "370305";
			} else if (cusname.contains("高青") || cusAddr.contains("高青")) {
				areacode = "370322";
			} else if (cusname.contains("周村") || cusAddr.contains("周村")) {
				areacode = "370306";
			} else if (cusname.contains("博山") || cusAddr.contains("博山")) {
				areacode = "370304";
			} else if (cusname.contains("沂源") || cusAddr.contains("沂源")) {
				areacode = "370323";
			} else if (cusname.contains("市直") || cusAddr.contains("市直")) {
				areacode = "370300";
			} else {
				areacode = "370303";
			}
			hql = "select count(c.cusId) from CusareaRelate c where c.cusId=?0";
			int count = baseService.findCount(hql, cusid);
			if (count == 0) {
				// 添加定点区划关联表
				cusareaRelate = new CusareaRelate();
				cusareaRelate.setAcAreacode(areacode);
				cusareaRelate.setCusId(cusid);
				baseService.save(cusareaRelate);
				num++;
			}
		}
		map.put("未分区定点数:", num);
		return map;
	}
}

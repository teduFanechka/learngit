package yibao.yiwei.service.impl;

import java.io.File;
import java.io.IOException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import yibao.yiwei.dao.IBaseDao;
import yibao.yiwei.entity.system.CouUploadfileByDate;
import yibao.yiwei.entity.system.Customer;
import yibao.yiwei.entity.system.Errorlog;
import yibao.yiwei.entity.system.Tzddlog;
import yibao.yiwei.entity.system.Uploadfile;
import yibao.yiwei.service.IAddFileData;
import yibao.yiwei.service.ITimerTask;
import yibao.yiwei.service.ITzddlogManager;
import yibao.yiwei.utils.RC2Coder;
import yibao.yiwei.utils.Utils;

@SuppressWarnings("all")
@Service
@Transactional
public class TimerTask implements ITimerTask {

	@Autowired
	private IBaseDao baseDao;
	
	@Autowired
	private IAddFileData addFileData;
	
	@Autowired
	private ITzddlogManager tzddlogManager;
	
	/**
	 * 解析文件
	 */
	@Override
	public void parseFile(Uploadfile uploadfile) {
		String qsql = "update Uploadfile set isHandle=-1,upCount=0,upName=?0 where upId=?1";
		try {
			//淘汰已注销定点的文件
			String sql = "from Customer where (cusStatus=1 or cusStatus=2) and cusId=?0";
			Customer customer = (Customer)baseDao.findUnique(sql, uploadfile.getCusId());
			if(null == customer){
				baseDao.updateOrDelete(qsql,"<font color='red'>该定点已注销，请删除相关文件</font>", uploadfile.getUpId());
				return;
			}
			//淘汰同一客户的重名文件
			sql = "select count(upId) from Uploadfile where cusId=?0 and filename=?1 and (isHandle=1 or isHandle=-1) and upId!=?2";
			int num = baseDao.findCount(sql,uploadfile.getCusId(),uploadfile.getFilename(),uploadfile.getUpId());
			if(num > 0){
				baseDao.updateOrDelete(qsql,"<font color='blue'>该定点的该文件已解析"+num+"次，请删除重名文件</font>", uploadfile.getUpId());
				return;
			}
			//判断Windows、Linux
			String filePath;
			if(System.getProperty("os.name").toLowerCase().indexOf("windows") != -1){//Windows
				filePath = "D:" + uploadfile.getUpFilepath();
			} else {//Linux
				filePath = uploadfile.getUpFilepath();
			}
			//加密文件解密
			if (uploadfile.getIsEncrypt() == 1) {//加密
				File file = new File(filePath.split("MI")[0] + "Ming");//截取MI前面的字符串
				if (!file.exists() && !file.isDirectory()) {
					file.mkdirs();
				}
				String newPath = file + "/De" + uploadfile.getFilename();//解密文件路径：原路径+/De+加密文件名
				RC2Coder rc = new RC2Coder("12345678");
				rc.decrypt(filePath, newPath);//新路径生成解密文件
				addToData(uploadfile.getUpFileflag(), newPath, uploadfile.getCusId(), uploadfile.getUpCollectiondate(), uploadfile.getUpId(), uploadfile.getCusName(), customer.getCusFlag(),uploadfile.getFilename());
			} else  {//不加密
				addToData(uploadfile.getUpFileflag(), filePath, uploadfile.getCusId(), uploadfile.getUpCollectiondate(), uploadfile.getUpId(), uploadfile.getCusName(), customer.getCusFlag(),uploadfile.getFilename());
			}
		} catch (Exception e) {//本地解析加密文件会抛异常，提示文件不存在
			baseDao.updateOrDelete(qsql,"<font color='red'>parseFile异常</font>", uploadfile.getUpId());
			String log = e.toString();
			if (log.length() > 300){
				log = log.substring(0, 300);
			}
			Errorlog errorlog = new Errorlog();
			errorlog.setCusId(uploadfile.getCusId());
			errorlog.setCusName(uploadfile.getCusName());
			errorlog.setErrAddtime(new Date());
			errorlog.setErrFileflag(uploadfile.getUpFileflag());
			errorlog.setErrFilepath(uploadfile.getFilename());
			errorlog.setErrLog(log);
			errorlog.setErrType("parseFile异常");
			baseDao.save(errorlog);
		}
	}
		
	/**
	 * 添加解析数据
	 * @param upFileflag
	 * @param path
	 * @param cusId
	 * @param upCollectdate
	 * @param upId
	 * @param cusName
	 * @param cusFlag
	 * @param fileName
	 * @throws IOException
	 * @throws ParseException
	 */
	public void addToData(String upFileflag, String path, String cusId, Date upCollectdate, int upId, String cusName, String cusFlag,String fileName) throws IOException, ParseException {
		if (upFileflag.equals("102") || upFileflag.equals("302") || upFileflag.equals("303") || upFileflag.equals("202")) {//项目编码
			addFileData.addDrugcatalog(path, cusId,cusName, upCollectdate,upId,fileName);
		} 
		else if (upFileflag.equals("103") || upFileflag.equals("304") || upFileflag.equals("203")) {//供应商/生产商信息
			addFileData.addSuppliers(path, cusId,cusName, upCollectdate, upId,fileName);
		} 
		else if (upFileflag.equals("104") || upFileflag.equals("305") || upFileflag.equals("204")) {//医护人员信息
			addFileData.addEmployees(path, cusId,cusName, upCollectdate, upId, cusFlag,fileName);
		} 
		else if (upFileflag.equals("106") || upFileflag.equals("307") || upFileflag.equals("206")) {//入库信息
			addFileData.addWarehouseitems(path, cusId,cusName, upCollectdate, upId, cusFlag,fileName);
		} 
		else if (upFileflag.equals("112") || upFileflag.equals("316") || upFileflag.equals("212")) {//出库信息
			addFileData.addDeliveryitems(path, cusId,cusName, upCollectdate, upId, cusFlag,fileName);
		} 
		else if (upFileflag.equals("318") || upFileflag.equals("116") || upFileflag.equals("216")) {//库存信息
			addFileData.addItemstock(path, cusId,cusName, upCollectdate, upId, cusFlag,fileName);
		} 
		else if (upFileflag.equals("108") || upFileflag.equals("317") || upFileflag.equals("208")) {//销售信息
			addFileData.addSalesitems(path, cusId,cusName, upCollectdate, upId, cusFlag,fileName);
		} 
		else if (upFileflag.equals("314") || upFileflag.equals("114") || upFileflag.equals("214")) {//库房信息
			addFileData.addWarehouse(path, cusId,cusName, upCollectdate, upId, cusFlag,fileName);
		} 
		else if (upFileflag.equals("110") || upFileflag.equals("210")) {//处方信息
			addFileData.addPrescribes(path, cusId,cusName, upCollectdate, upId, cusFlag,fileName);
		} 
		else if (upFileflag.equals("113") || upFileflag.equals("101")) {//分店信息
			addFileData.addCustomers(path, cusId,cusName,upCollectdate, upId, fileName);
		}
		else if (upFileflag.equals("308")) {//住院记录
			addFileData.addHospitalized(path, cusId,cusName, upCollectdate, upId,fileName);
		} 
		else if (upFileflag.equals("309")) {//出院记录
			addFileData.addDischarged(path, cusId,cusName, upCollectdate, upId,fileName);
		} 
		else if (upFileflag.equals("310")) {//医嘱信息
			addFileData.addDoctororder(path, cusId,cusName, upCollectdate, upId,fileName);
		} 
		else if (upFileflag.equals("319") || upFileflag.equals("320")) {//医嘱执行记录
			addFileData.addOrderperform(path, cusId,cusName, upCollectdate, upId,fileName);
		} 
		else if (upFileflag.equals("315") || upFileflag.equals("115") || upFileflag.equals("215")) {//科室信息
			addFileData.addDepartment(path, cusId, cusName,upCollectdate, upId, cusFlag,fileName);
		} 
		else if (upFileflag.equals("313")) {//诊断记录
			addFileData.addClinicrecords(path, cusId,cusName, upCollectdate, upId,fileName);
		} 
		else if (upFileflag.equals("325")) {//病案首页(概要)
			addFileData.addMedrecords(path, cusId,cusName, upCollectdate, upId,fileName);
		} 
		else if (upFileflag.equals("326")) {//病案首页(出院诊断)
			addFileData.addDischargediag(path, cusId,cusName, upCollectdate, upId,fileName);
		} 
		else if (upFileflag.equals("327")) {//病案首页(手术操作)
			addFileData.addOperation(path, cusId, cusName,upCollectdate, upId,fileName);
		} 
		else if (upFileflag.equals("321")) {//检查、检验结果
			addFileData.addCheckresult(path, cusId,cusName, upCollectdate, upId,fileName);
		} 
		else if (upFileflag.equals("322")) {//检查、检验结果详细
			addFileData.addCheckdetail(path, cusId,cusName, upCollectdate, upId,fileName);
		} 
		else {
			System.out.println("没有了");
		}
	}

	/**
	 * 定点上传统计生成
	 */
	@Override
	public void couUploadfile() {
		String hql = "delete CouUploadfileByDate where cufCreatedate<?0";
		baseDao.updateOrDelete(hql,Utils.getDate(-1));//每天插入前，先删除昨天之前的数据，因为该表只查最新日期数据
		SimpleDateFormat sf = new SimpleDateFormat("yyyy-MM-dd");
		hql = "from Customer where cusStatus=1 or cusStatus=2";
		List<Customer> list = baseDao.find(hql);
		for (int i = 0; i < list.size(); i++) {
			try {
				Customer customer = list.get(i);
				String cusId = customer.getCusId();
				String cufUpdate = "";//最后上传日期
				int cufRecordcount = 0;//昨日上传类型数量
				int cufFilecount = 0;//历史上传类型数量
				if(customer.getCusStatus()==1){//单体、门诊、医院、连锁总店
					hql = "SELECT max(UP_DATE) FROM TBL_UPLOADFILE where CUS_ID=?0";
					Object obj = baseDao.findUniqueSql(hql,cusId);
					if(null != obj){//有上传
						cufUpdate = sf.format(obj);
						hql = "SELECT COUNT(DISTINCT UP_FILEFLAG) FROM TBL_UPLOADFILE WHERE CUS_ID=?0 AND UP_DATE>?1";
						cufRecordcount = baseDao.findCountSql(hql, cusId, Utils.getDate(-1));//大于昨天0点
						hql = "SELECT COUNT(DISTINCT UP_FILEFLAG) FROM TBL_UPLOADFILE WHERE CUS_ID=?0";
						cufFilecount = baseDao.findCountSql(hql, cusId);
					} else {//无上传
						cufUpdate = "<font color='red'>无上传记录</font>";
						cufRecordcount = 0;
						cufFilecount = 0;
					}
				} else {//cusStatus=2连锁分店
					hql = "select max(SO_DATETIME) from TBL_SALESITEM where CUS_ID=?0";
					Object obj = baseDao.findUniqueSql(hql,cusId);
					if(null != obj){//有销售
						cufUpdate = sf.format(obj);
					} else {//无销售
						cufUpdate = "<font color='red'>无销售记录</font>";
					}
				}
				CouUploadfileByDate couUploadfileByDate = new CouUploadfileByDate();
				couUploadfileByDate.setCusId(cusId);
				couUploadfileByDate.setCufFileflag(customer.getCusDareway());//定点编码
				couUploadfileByDate.setCusName(customer.getCusName());
				couUploadfileByDate.setCufUpdate(cufUpdate); // 上传时间(最后)
				couUploadfileByDate.setCufRecordcount(cufRecordcount);// 昨日上传项目数
				couUploadfileByDate.setCufFilecount(cufFilecount);// 历史上传项目总数
				couUploadfileByDate.setCufCreatedate(sf.parse(sf.format(new Date())));//创建日期
				couUploadfileByDate.setCusFlag(customer.getCusFlag());//101单体药店 102 连锁药店 201门诊 301医院
				baseDao.save(couUploadfileByDate);
			} catch (Exception e) {
				Errorlog errorlog = new Errorlog();
				errorlog.setErrAddtime(new Date());
				errorlog.setErrLog(e.toString());
				errorlog.setErrType("couUploadfile循环异常");
				baseDao.save(errorlog);
			}
		}
	}
	
	/**
	 * 停止定点
	 */
	@Override
	public void stopTzddlog(){
		String hql = "from Customer where cusStatus=1 or cusStatus=2";
		List<Customer> list = baseDao.find(hql);
		for(int i = 0; i < list.size(); i++){
			if(i==3){//测试功能，不能大面积停止定点
				break;
			}
			try {
				Customer customer = list.get(i);
				Object obj = null;
				if(customer.getCusStatus()==1){//单体、门诊、医院、连锁总店
					hql = "select max(UP_DATE) from TBL_UPLOADFILE where cus_id=?0";
					obj = baseDao.findUniqueSql(hql,customer.getCusId());
					if(null == obj){//无上传记录
						hql = "from Tzddlog where tzYybm=?0";
						Tzddlog tzddlog = (Tzddlog)baseDao.findUnique(hql,customer.getCusDareway());
						if(null != tzddlog){
							if(tzddlog.getTzOperate().equals("0") && tzddlog.getTzStatus().equals("0")){//已暂停成功的不能再暂停，否则重复停止没法再开启
								continue;
							} else{
								tzddlogManager.updateTzOperate(tzddlog.getTzId(), "0");
							}
						}
					}
				} else {//cusStatus=2连锁分店
					hql = "select max(SO_DATETIME) from TBL_SALESITEM where CUS_ID=?0";
					obj = baseDao.findUniqueSql(hql,customer.getCusId());
					if (null == obj){//无销售记录
						hql = "from Tzddlog where tzYybm=?0";
						Tzddlog tzddlog = (Tzddlog)baseDao.findUnique(hql,customer.getCusDareway());
						if(null != tzddlog){
							if(tzddlog.getTzOperate().equals("0") && tzddlog.getTzStatus().equals("0")){//已暂停成功的不能再暂停，否则重复停止没法再开启
								continue;
							} else{
								tzddlogManager.updateTzOperate(tzddlog.getTzId(), "0");
							}
						}
					}
				}
			} catch (Exception e) {
				Errorlog errorlog = new Errorlog();
				errorlog.setErrAddtime(new Date());
				errorlog.setErrLog(e.toString());
				errorlog.setErrType("stopTzddlog循环异常");
				baseDao.save(errorlog);
			}
		}
	}
	
}

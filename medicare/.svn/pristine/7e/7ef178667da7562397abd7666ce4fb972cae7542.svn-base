package yibao.yiwei.service.impl;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Date;

import org.hibernate.exception.DataException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import yibao.yiwei.dao.IBaseDao;
import yibao.yiwei.entity.Doctororder;
import yibao.yiwei.entity.system.Errorlog;
import yibao.yiwei.service.IDoctororderManager;

/**
 * 医嘱信息表
 * @author Administrator
 *
 */
@SuppressWarnings("unchecked")
@Service
@Transactional
public class DoctororderManager implements IDoctororderManager {
	
	@Autowired
	private IBaseDao baseDao;

	/**
	 * 添加医嘱信息表
	 */
	@Override
	public boolean addDoctororder(String path, String cusId, String cusName, Date upCollectdate, int upId) throws IOException {
		BufferedReader bufr = null;
		int count = 0;// 定义当行行号
		boolean b = false;// 定义解析是否正常
		String line = null;// 定义当前行
		String[] name = null;// 定义当前行String数组
		Doctororder doctororder;
		try {
			File file = new File(path);
			if (file.isFile()) {
				bufr = new BufferedReader(new FileReader(file));
				while ((line = bufr.readLine()) != null) {
					name = line.split("##");
					// 上传文件解析不正确,可能为数据不全
					if (name.length < 22) {
						throw new DataException("异常信息:正确字段总数:22,实际解析字段数:" + name.length + ",数据不全解析停止", null);
					}
					for (int i = 0; i < name.length; i++) {
						if (null != name[i] && name[i].trim().equals("NULL")){
							name[i] = "";
						}
					}
					try{//某行有错误，捕获异常后继续解析下面
						doctororder = new Doctororder();
						doctororder.setCaseNo(name[0].trim());// 病案号1
						doctororder.setHospNo(name[1].trim());// 住院号2
						doctororder.setDoNo(name[2].trim());// 医嘱号3
						doctororder.setDoType(name[3].trim());// 医嘱类型4
						DateFormat df;
						if (name[4].trim().equals("NULL")) {
							doctororder.setDoBegintime(null);
						} else {
							if (name[4].trim().length() == 10) {// 开立日期5
								df = new SimpleDateFormat("yyyy-MM-dd");
							} else {
								df = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
							}
							doctororder.setDoBegintime(df.parse(name[4].trim()));
						}
						doctororder.setDoDept(name[5].trim());// 开立科室6
						doctororder.setDoDeptname(name[6].trim());// 开立科室名称7
						doctororder.setDoDoctor(name[7].trim());// 开立医师8
						doctororder.setDoDoctorname(name[8].trim());// 开立医师名称9
						doctororder.setDoCheck(name[9].trim());// 审核护士10
						doctororder.setDoCheckname(name[10].trim());// 审核护士名称11
						doctororder.setItemCode(name[11].trim());// 项目编码12
						doctororder.setItemName(name[12].trim());// 项目名称13
						if (name[13].trim().equals("NULL")) {// 单价14
							doctororder.setItemPrice(null);
						} else {
							doctororder.setItemPrice(Double.parseDouble(name[13].trim()));
						}
						doctororder.setItemFreq(name[14].trim());// 频次15
						doctororder.setItemAmount(name[15].trim());// 用量16
						doctororder.setItmeRoute(name[16].trim());// 用法17
						doctororder.setDoEnddr(name[17].trim());// 停止医师18
						doctororder.setDoEnddrrname(name[18].trim());// 停止医师名称19
						doctororder.setDoEndnurse(name[19].trim());// 停止护士20
						doctororder.setDoEndnursename(name[20].trim());// 停止护士名称21
						if (name[21].trim().equals("NULL")) {
							doctororder.setDoEndtime(null);
						} else {
							if (name[21].trim().length() == 10) { // 停止日期22
								df = new SimpleDateFormat("yyyy-MM-dd");
							} else {
								df = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
							}
							doctororder.setDoEndtime(df.parse(name[21].trim()));
						}
						doctororder.setDoPicktime(upCollectdate);// 采集日期从传来的文件采集时间获取
						doctororder.setDoAddtime(new Date());// 创建日期
						doctororder.setCusDareway(""); // 医院编码
						doctororder.setCusId(cusId);// 获取上级编码
						baseDao.save(doctororder);
						count++;
					} catch (Exception e) {
						System.out.println("该行解析错误");
					}
					
				}
				String upHql = "update Uploadfile u set u.upCount=?0 where u.upId=?1 ";
				baseDao.updateOrDelete(upHql, count, upId);
				b = true;
			}
		} catch (Exception e) {
			String log = e.toString();
			if (log.length() > 400){
				log = log.substring(0, 300);
			}
			Errorlog errorlog = new Errorlog();
			errorlog.setCusId(cusId);
			errorlog.setCusName(cusName);
			errorlog.setErrAddtime(new Date());
			errorlog.setErrFileflag("医嘱信息表");
			errorlog.setErrFilepath(path);
			errorlog.setErrLog(log + "\n错误行号:" + (count+1) + "  当前错误行内容:\n" + line);
			if (null !=name && name.length < 22) {
				errorlog.setErrType("数据上传字段不全错误");
			} else {
				errorlog.setErrType("数据解析错误");
			}
			baseDao.save(errorlog);
		} finally {
			if (bufr != null) {
				bufr.close();
			}
		}
		return b;
	}
}

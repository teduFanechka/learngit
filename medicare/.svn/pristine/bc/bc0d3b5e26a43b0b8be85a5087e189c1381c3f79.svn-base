package yibao.yiwei.controller.system;

import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.net.URLDecoder;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;

import yibao.yiwei.entity.Customer;
import yibao.yiwei.entity.system.CusareaRelate;
import yibao.yiwei.service.IBaseService;
import yibao.yiwei.utils.ChineseCharToEn;
import yibao.yiwei.utils.ProjectConstant;

/**
 * 定点信息
 * @author Administrator
 *
 */
@SuppressWarnings("unchecked")
@Controller
public class CustomerController {

	@Autowired
	private IBaseService baseService;

	/**
	 * 转到定点信息
	 * @return
	 */
	@AuthPassport
	@RequestMapping("/toCustomer")
	public String toCustomer(HttpServletRequest request) {
		String hql = "from Areacode where acStatus=1";//查询已启用的区划
		List areacodeList = baseService.find(hql);
		request.setAttribute("areacodeList", areacodeList);
		return "/customer/customer";
	}
	
	/**
	 * 定点信息
	 * @param request
	 * @param cusFlag
	 * @param cusName
	 * @return
	 */
	@ResponseBody
	@RequestMapping("/getAllCustomer")
	public Map<String, Object> getAllCustomer(HttpServletRequest request,String cusFlag,String acAreacode,String cusName) {
		String rows = request.getParameter("rows");// 每页显示的记录数
		String page = request.getParameter("page");// 当前第几页
		String countHql = "select count(cusId) from Customer where cusStatus!=-1 ";//除已注销
		String hql = "from Customer where cusStatus!=-1 ";
		if (null != cusFlag && !cusFlag.equals("")) {
			cusFlag = cusFlag.trim();
			countHql+= " and cusFlag=" + cusFlag;
			hql+= " and cusFlag=" + cusFlag;
		}
		if (null != cusName && !cusName.equals("")) {
			cusName = cusName.trim();
			countHql+= " and (cusName like '%" + cusName + "%' or cusDareway='" + cusName + "' or cusId='" + cusName + "')";
			hql+= " and (cusName like '%" + cusName + "%' or cusDareway='" + cusName + "' or cusId='" + cusName + "')";
		}
		if(null != acAreacode && !acAreacode.equals("") && !acAreacode.equals("-1")){//根据区县查询
			acAreacode = acAreacode.trim();
			countHql+= " and cusId in (select cusId from CusareaRelate where acAreacode='"+acAreacode+"')";
			hql+= " and cusId in (select cusId from CusareaRelate where acAreacode='"+acAreacode+"')";
		}
		if(null != acAreacode && acAreacode.equals("-1")){//未划分区县
			acAreacode = acAreacode.trim();
			countHql+= " and cusId not in (select cusId from CusareaRelate)";
			hql+= " and cusId not in (select cusId from CusareaRelate)";
		}
		hql+= " order by cusRegdate desc nulls last";
		int count = baseService.findCount(countHql);
		List list = baseService.findByPage(hql, rows, page);
		Map<String, Object> map = new HashMap<String, Object>();
		map.put("total", count);
		map.put("rows", list);
		return map;
	}
	
	/**
	 * 定点区划设置
	 * @param request
	 * @return
	 */
	@ResponseBody
	@RequestMapping("/addAreacus")
	public Map addAreacus(HttpServletRequest request) {
		Map<String, Object> map = new HashMap<String, Object>();
		String ids = request.getParameter("ids");
		String areacode = request.getParameter("areacode");
		String arr[] = ids.split(",");
		CusareaRelate cusareaRelate;
		for (int i = 0; i < arr.length; i++) {
			String cusid = arr[i];
			String hql = "delete CusareaRelate where cusId=?0";
			baseService.updateOrDelete(hql, cusid);
			cusareaRelate = new CusareaRelate();
			cusareaRelate.setAcAreacode(areacode);
			cusareaRelate.setCusId(cusid);
			baseService.save(cusareaRelate);
		}
		map.put("status", "区划设置成功");
		return map;
	}
	
	/**
	 * 显示定点区划
	 * @param userId
	 * @return
	 */
	@ResponseBody
	@RequestMapping("/cusArea ")
	public Map cusArea(String cusId){
		Map<String, Object> map = new HashMap<String, Object>();
		String sql = "SELECT a.AC_AREANAME FROM TBL_AREACODE a inner join SYS_CUSAREA_RELATE cr on a.AC_AREACODE=cr.AC_AREACODE and a.AC_STATUS=1 WHERE cr.CUS_ID=?0";
		String areaName = (String)baseService.findUniqueSql(sql, cusId);
		map.put("areaName", areaName);
		return map;
	}
	
	/**
	 * 修改定点信息
	 * @param customer
	 * @return
	 */
	@ResponseBody
	@RequestMapping("updateCustomer")
	public Map updateCustomer(Customer customer) {
		Map<String, Object> map = new HashMap<String, Object>();
		baseService.update(customer);
		map.put("status", "定点信息修改成功");
		return map;
	}
	
	/**
	 * 修改定点状态(通过审核或注销)
	 * @param request
	 * @param type
	 * @return
	 */
	@ResponseBody
	@RequestMapping("/updateCustomerStatus")
	public Map updateCustomerStatus(HttpServletRequest request,String type){
		Map<String, Object> map = new HashMap<String, Object>();
		String ids = request.getParameter("ids");
		String arr[] = ids.split(",");
		if(type.equals("1")){//通过审核
			for (int i = 0; i < arr.length; i++) {
				String hql = "from Customer where cusId=?0";
				Customer customer = (Customer)baseService.findUnique(hql, arr[i]);
				if(customer.getCusFlag().equals("102") && customer.getCusParentid().length()>5){//连锁分店(连锁总店parentid=0)
					hql = "update Customer c set c.cusStatus=2 where c.cusId=?0";
				} else {//非连锁(包括连锁总店)
					hql = "update Customer c set c.cusStatus=1 where c.cusId=?0";
				}
				baseService.updateOrDelete(hql, arr[i]);
			}
			map.put("status", "审核通过");
		}else {//注销定点
			for (int i = 0; i < arr.length; i++) {
				String cusId = arr[i];
				String hql = "update Customer c set c.cusStatus=-1,c.cusName=c.cusName||'-注销状态' where c.cusId=?0";//||原内容追加
				baseService.updateOrDelete(hql,  cusId);
				hql = "update Customer c set c.cusStatus=-1,c.cusName=c.cusName||'-注销状态' where c.cusParentid=?0 and c.cusStatus=2";//注销连锁分店：cusStatus=2
				baseService.updateOrDelete(hql,  cusId);
				hql = "delete CusareaRelate c where c.cusId=?0";//删除CusareaRelate区划关联
				baseService.updateOrDelete(hql, cusId);
			}
			map.put("status", "注销成功");
		}
		return map;
	}
	
	/**
	 * 转到综合查询
	 * @param cusFlag
	 * @param areacode
	 * @param request
	 * @param session
	 * @return
	 */
	@RequestMapping("/toAreaCustomer")
	public String toAreaCustomer(String cusFlag, String areacode, HttpServletRequest request) {
		request.setAttribute("cusFlag", cusFlag);
		request.setAttribute("areacode", areacode);
		return "/customer/areacustomer";
	}
	
	/**
	 * 综合查询（显示受区划权限控制）注册审核通过的、有区划的
	 * @param cusFlag
	 * @param areacode
	 * @param request
	 * @return
	 * @throws UnsupportedEncodingException
	 */
	@ResponseBody
	@RequestMapping("/getAllAreaCustomer")
	public Map getAllAreaCustomer(String cusFlag, String areacode,String cusName, HttpServletRequest request) throws UnsupportedEncodingException {
		Map<String, Object> map = new HashMap<String, Object>();
		List list = new ArrayList();
		String rows = request.getParameter("rows");// 每页显示的记录数
		String page = request.getParameter("page");// 当前第几页
		int count = 0;
		String countHql = "select count(cusId) from Customer where cusId  in (select cusId from CusareaRelate where acAreacode in("+areacode+")) and (cusStatus=1 or cusStatus=2)";
		String hql = "from Customer where cusId  in (select cusId from CusareaRelate where acAreacode in("+areacode+")) and (cusStatus=1 or cusStatus=2)";
		if (null != cusFlag && !cusFlag.equals("")) {
			countHql+= " and cusFlag=" + cusFlag;
			hql+= " and cusFlag=" + cusFlag;
		}
		if (null != cusName && !cusName.equals("")) {
			cusName = cusName.trim();
			countHql+= " and (cusName like '%" + cusName + "%' or cusDareway='" + cusName + "')";
			hql+= " and (cusName like '%" + cusName + "%' or cusDareway='" + cusName + "')";
		}
		hql+= " order by cusRegdate desc";
		count = baseService.findCount(countHql);
		list = baseService.findByPage(hql, rows, page);
		map.put("total", count);
		map.put("rows", list);
		return map;
	}
	
	/**
	 * 通过综合查询页面转到定点统计页面
	 * @param cusFlag
	 * @param cusId
	 * @param request
	 * @return
	 * @throws UnsupportedEncodingException
	 */
	@RequestMapping("/getCustomerById")
	public String getCustomerById(String cusFlag, String cusId, HttpServletRequest request) throws UnsupportedEncodingException {
		String hql = "select cusName,cusId from Customer where cusId=?0";
		List list = baseService.find(hql,cusId);
		request.setAttribute("list", list);
		request.setAttribute("cusFlag", cusFlag);
		return "/customer/listcustomer";
	}
	
	/**
	 * 定点统计页面查询定点信息
	 * @param cusId
	 * @param request
	 * @param response
	 * @return
	 */
	@RequestMapping("/getCustomerInfo")
	public String getCustomerInfo(String cusId, HttpServletRequest request, HttpServletResponse response) {
		Customer customer = (Customer) baseService.get(Customer.class, cusId);
		String type = ProjectConstant.getFileFlag(customer.getCusFlag());// 根据101获取"单体药店"
		request.setAttribute("c", customer);
		request.setAttribute("cusFlag", type);
		return "/customer/customerinfo";
	}
	
	/**
	 * 测试更新地址
	 */
	@RequestMapping("/ewupdate/service/testconn")
	@ResponseBody
	public void testConn(){
		System.out.println("测试更新地址");
	}
	
	/**
	 * 测试上传地址
	 */
	@RequestMapping("/medicare/service/testconn")
	@ResponseBody
	public void testConn2(){
		System.out.println("测试上传地址");
	}
	
	/**
	 * 药店注册
	 * @param customer
	 * @param request
	 * @param response
	 * @return
	 */
	@RequestMapping("/medicare/service/register")
	@ResponseBody
	public Map addCustomer(Customer customer, HttpServletRequest request, HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		String errmsg = "";//错误信息
		int errcode = 0;//0成功，1失败
		int count = 0;//计数
		String hql = "";
		
		if(!customer.getCusFlag().equals("102") && customer.getCusDareway().equals("")){//连锁药店可以没有医院编码
			map.put("errmsg", "医院编码不能为空");
			map.put("errcode", 1);
			return map;
		}
		
		if (customer.getCusFlag().equals("102")){//连锁药店注册
			hql = "select count(cusId) from Customer where (cusStatus = 1 or cusStatus=2) and cusName=?0";
			count = baseService.findCount(hql, customer.getCusName());
		}else{//非连锁药店注册
			hql = "select count(cusId) from Customer where (cusStatus = 1 or cusStatus=2) and cusDareway=?0";
			count = baseService.findCount(hql, customer.getCusDareway());
		}
		
		String cusid = "";
		if (count > 0) {//已经注册
			List<Customer> list;
			if (customer.getCusFlag().equals("102")){//查询连锁药店已经注册的信息
				hql = "from Customer where (cusStatus = 1 or cusStatus=2) and cusName=?0";
				list = (List<Customer>) baseService.find(hql, customer.getCusName());
			}else{
				hql = "from Customer where (cusStatus = 1 or cusStatus=2) and cusDareway=?0";
				list = (List<Customer>) baseService.find(hql, customer.getCusDareway());
			}
			if(list.size()>0){
				Customer cus = list.get(0);
				cus.setCusName(customer.getCusName());
				cus.setCusRegdate(new Date());
				cus.setCusUniqure(customer.getCusUniqure());
				cus.setCusAddr(customer.getCusAddr());
				cus.setCusPhone(customer.getCusPhone());
				cus.setCusContact(customer.getCusContact());
				cus.setCusRemark(customer.getCusRemark());
				baseService.update(cus);
				cusid = cus.getCusId();
				errmsg  = "注册信息已更新";
				errcode = 0;
			}
		} else {//没有注册
			String cusname = customer.getCusName() != null ? customer.getCusName().trim() : "";
			String cusAddr = customer.getCusAddr() != null ? customer.getCusAddr() : "";
			customer.setCusRegdate(new Date());
			ChineseCharToEn ctn = new ChineseCharToEn();//获取客户拼音简码
			customer.setCusPcode(ctn.getAllFirstLetter(cusname));
			baseService.save(customer);
			cusid = customer.getCusId();
			
			String areacode;//区划编码
			if (cusname.contains("张店") || cusAddr.contains("张店")) {
				areacode = "370303";
			} else if (cusname.contains("淄川") || cusAddr.contains("淄川")) {
				areacode = "370302";
			} else if (cusname.contains("桓台") || cusAddr.contains("桓台")) {
				areacode = "370321";
			} else if (cusname.contains("临淄") || cusAddr.contains("临淄")) {
				areacode = "370305";
			} else if (cusname.contains("高青") || cusAddr.contains("高青")) {
				areacode = "370322";
			} else if (cusname.contains("周村") || cusAddr.contains("周村")) {
				areacode = "370306";
			} else if (cusname.contains("博山") || cusAddr.contains("博山")) {
				areacode = "370304";
			} else if (cusname.contains("沂源") || cusAddr.contains("沂源")) {
				areacode = "370323";
			} else if (cusname.contains("市直") || cusAddr.contains("市直")) {
				areacode = "370300";
			} else {
				areacode = "370303";
			}
			
			hql = "delete from CusareaRelate where cusId=?0";
			baseService.updateOrDelete(hql, cusid);
			CusareaRelate cusareaRelate = new CusareaRelate();
			cusareaRelate.setAcAreacode(areacode);
			cusareaRelate.setCusId(cusid);
			baseService.save(cusareaRelate);
			errmsg = "注册成功";
			errcode = 0;
		}
		
		map.put("id", cusid);
		map.put("errmsg", errmsg);
		map.put("errcode", errcode);
		
		return map;
	}

	/**
	 * 请求单体药店视图-进销存数据模块
	 * 
	 * @param request
	 * @param session
	 * @return
	 * @throws UnsupportedEncodingException
	 */
	@RequestMapping("/getCustomerList")
	public String getCustomerList(HttpServletRequest request, HttpSession session) throws UnsupportedEncodingException {
		String cusName = request.getParameter("cusName")!=null ? request.getParameter("cusName").trim() : "";// 查询参数
		cusName = URLDecoder.decode(cusName, "UTF-8");
		String cusFlag = request.getParameter("cusFlag") != null ? request.getParameter("cusFlag") : "";// 定点标识
		List list = new ArrayList();
		String hql = "";
		String acAreacode = (String) session.getAttribute("acAreacode");
		hql = "select c.cusName,c.cusId  from Customer c  where  c.cusId  in(select a.cusId from CusareaRelate a where a.acAreacode in("+ acAreacode+ ")) and c.cusFlag=?0 and (c.cusStatus=1 or c.cusStatus=2)";
		if (!cusName.equals("")) {
			hql += " and (c.cusName like '%" + cusName + "%' or c.cusDareway='" + cusName + "')";
		} 
		hql += " order by c.cusRegdate desc nulls last,c.cusId";
		list = baseService.find(hql, cusFlag);
		request.setAttribute("list", list);//往前台传customer的name和id
		request.setAttribute("cusFlag", cusFlag);
		return "/customer/listcustomer";
	}
	
	// 返回json信息
	public void backInfo(HttpServletResponse response, int errcode, String errmsg, String id) {
		String json = "";
		json = "{ \"errcode\": " + errcode + ",\"errmsg\": \"" + errmsg + "\",\"id\": \"" + id + "\" }";
		try {
			response.setContentType("text/html;charset=utf-8");
			response.getWriter().write(json);
		} catch (IOException e) {
			e.printStackTrace();
		}
	}

}
